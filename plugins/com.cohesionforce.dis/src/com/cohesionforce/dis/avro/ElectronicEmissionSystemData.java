/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ElectronicEmissionSystemData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ElectronicEmissionSystemData\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"systemDataLength\",\"type\":\"int\"},{\"name\":\"numberOfBeamDataRecords\",\"type\":\"int\"},{\"name\":\"emissionsPadding2\",\"type\":\"int\"},{\"name\":\"emitterSystem\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"EmitterSystem\",\"fields\":[{\"name\":\"emitterName\",\"type\":\"int\"},{\"name\":\"function\",\"type\":\"int\"},{\"name\":\"emitterIdNumber\",\"type\":\"int\"}]}]},{\"name\":\"location\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Vector3Float\",\"fields\":[{\"name\":\"x\",\"type\":\"float\"},{\"name\":\"y\",\"type\":\"float\"},{\"name\":\"z\",\"type\":\"float\"}]}]},{\"name\":\"beamDataRecords\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ElectronicEmissionBeamData\",\"fields\":[{\"name\":\"beamDataLength\",\"type\":\"int\"},{\"name\":\"beamIDNumber\",\"type\":\"int\"},{\"name\":\"beamParameterIndex\",\"type\":\"int\"},{\"name\":\"fundamentalParameterData\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FundamentalParameterData\",\"fields\":[{\"name\":\"frequency\",\"type\":\"float\"},{\"name\":\"frequencyRange\",\"type\":\"float\"},{\"name\":\"effectiveRadiatedPower\",\"type\":\"float\"},{\"name\":\"pulseRepetitionFrequency\",\"type\":\"float\"},{\"name\":\"pulseWidth\",\"type\":\"float\"},{\"name\":\"beamAzimuthCenter\",\"type\":\"float\"},{\"name\":\"beamAzimuthSweep\",\"type\":\"float\"},{\"name\":\"beamElevationCenter\",\"type\":\"float\"},{\"name\":\"beamElevationSweep\",\"type\":\"float\"},{\"name\":\"beamSweepSync\",\"type\":\"float\"}]}]},{\"name\":\"beamFunction\",\"type\":\"int\"},{\"name\":\"numberOfTrackJamTargets\",\"type\":\"int\"},{\"name\":\"highDensityTrackJam\",\"type\":\"int\"},{\"name\":\"pad4\",\"type\":\"int\"},{\"name\":\"jammingModeSequence\",\"type\":\"long\"},{\"name\":\"trackJamTargets\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TrackJamTarget\",\"fields\":[{\"name\":\"trackJam\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"EntityID\",\"fields\":[{\"name\":\"site\",\"type\":\"int\"},{\"name\":\"application\",\"type\":\"int\"},{\"name\":\"entity\",\"type\":\"int\"}]}]},{\"name\":\"emitterID\",\"type\":\"int\"},{\"name\":\"beamID\",\"type\":\"int\"}]}}]}]}}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int systemDataLength;
  @Deprecated public int numberOfBeamDataRecords;
  @Deprecated public int emissionsPadding2;
  @Deprecated public com.cohesionforce.dis.avro.EmitterSystem emitterSystem;
  @Deprecated public com.cohesionforce.dis.avro.Vector3Float location;
  @Deprecated public java.util.List<com.cohesionforce.dis.avro.ElectronicEmissionBeamData> beamDataRecords;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ElectronicEmissionSystemData() {}

  /**
   * All-args constructor.
   */
  public ElectronicEmissionSystemData(java.lang.Integer systemDataLength, java.lang.Integer numberOfBeamDataRecords, java.lang.Integer emissionsPadding2, com.cohesionforce.dis.avro.EmitterSystem emitterSystem, com.cohesionforce.dis.avro.Vector3Float location, java.util.List<com.cohesionforce.dis.avro.ElectronicEmissionBeamData> beamDataRecords) {
    this.systemDataLength = systemDataLength;
    this.numberOfBeamDataRecords = numberOfBeamDataRecords;
    this.emissionsPadding2 = emissionsPadding2;
    this.emitterSystem = emitterSystem;
    this.location = location;
    this.beamDataRecords = beamDataRecords;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return systemDataLength;
    case 1: return numberOfBeamDataRecords;
    case 2: return emissionsPadding2;
    case 3: return emitterSystem;
    case 4: return location;
    case 5: return beamDataRecords;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: systemDataLength = (java.lang.Integer)value$; break;
    case 1: numberOfBeamDataRecords = (java.lang.Integer)value$; break;
    case 2: emissionsPadding2 = (java.lang.Integer)value$; break;
    case 3: emitterSystem = (com.cohesionforce.dis.avro.EmitterSystem)value$; break;
    case 4: location = (com.cohesionforce.dis.avro.Vector3Float)value$; break;
    case 5: beamDataRecords = (java.util.List<com.cohesionforce.dis.avro.ElectronicEmissionBeamData>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'systemDataLength' field.
   */
  public java.lang.Integer getSystemDataLength() {
    return systemDataLength;
  }

  /**
   * Sets the value of the 'systemDataLength' field.
   * @param value the value to set.
   */
  public void setSystemDataLength(java.lang.Integer value) {
    this.systemDataLength = value;
  }

  /**
   * Gets the value of the 'numberOfBeamDataRecords' field.
   */
  public java.lang.Integer getNumberOfBeamDataRecords() {
    return numberOfBeamDataRecords;
  }

  /**
   * Sets the value of the 'numberOfBeamDataRecords' field.
   * @param value the value to set.
   */
  public void setNumberOfBeamDataRecords(java.lang.Integer value) {
    this.numberOfBeamDataRecords = value;
  }

  /**
   * Gets the value of the 'emissionsPadding2' field.
   */
  public java.lang.Integer getEmissionsPadding2() {
    return emissionsPadding2;
  }

  /**
   * Sets the value of the 'emissionsPadding2' field.
   * @param value the value to set.
   */
  public void setEmissionsPadding2(java.lang.Integer value) {
    this.emissionsPadding2 = value;
  }

  /**
   * Gets the value of the 'emitterSystem' field.
   */
  public com.cohesionforce.dis.avro.EmitterSystem getEmitterSystem() {
    return emitterSystem;
  }

  /**
   * Sets the value of the 'emitterSystem' field.
   * @param value the value to set.
   */
  public void setEmitterSystem(com.cohesionforce.dis.avro.EmitterSystem value) {
    this.emitterSystem = value;
  }

  /**
   * Gets the value of the 'location' field.
   */
  public com.cohesionforce.dis.avro.Vector3Float getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(com.cohesionforce.dis.avro.Vector3Float value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'beamDataRecords' field.
   */
  public java.util.List<com.cohesionforce.dis.avro.ElectronicEmissionBeamData> getBeamDataRecords() {
    return beamDataRecords;
  }

  /**
   * Sets the value of the 'beamDataRecords' field.
   * @param value the value to set.
   */
  public void setBeamDataRecords(java.util.List<com.cohesionforce.dis.avro.ElectronicEmissionBeamData> value) {
    this.beamDataRecords = value;
  }

  /** Creates a new ElectronicEmissionSystemData RecordBuilder */
  public static com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder();
  }
  
  /** Creates a new ElectronicEmissionSystemData RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder newBuilder(com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder other) {
    return new com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder(other);
  }
  
  /** Creates a new ElectronicEmissionSystemData RecordBuilder by copying an existing ElectronicEmissionSystemData instance */
  public static com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder newBuilder(com.cohesionforce.dis.avro.ElectronicEmissionSystemData other) {
    return new com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder(other);
  }
  
  /**
   * RecordBuilder for ElectronicEmissionSystemData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ElectronicEmissionSystemData>
    implements org.apache.avro.data.RecordBuilder<ElectronicEmissionSystemData> {

    private int systemDataLength;
    private int numberOfBeamDataRecords;
    private int emissionsPadding2;
    private com.cohesionforce.dis.avro.EmitterSystem emitterSystem;
    private com.cohesionforce.dis.avro.Vector3Float location;
    private java.util.List<com.cohesionforce.dis.avro.ElectronicEmissionBeamData> beamDataRecords;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.ElectronicEmissionSystemData.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.systemDataLength)) {
        this.systemDataLength = data().deepCopy(fields()[0].schema(), other.systemDataLength);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.numberOfBeamDataRecords)) {
        this.numberOfBeamDataRecords = data().deepCopy(fields()[1].schema(), other.numberOfBeamDataRecords);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.emissionsPadding2)) {
        this.emissionsPadding2 = data().deepCopy(fields()[2].schema(), other.emissionsPadding2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.emitterSystem)) {
        this.emitterSystem = data().deepCopy(fields()[3].schema(), other.emitterSystem);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.location)) {
        this.location = data().deepCopy(fields()[4].schema(), other.location);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.beamDataRecords)) {
        this.beamDataRecords = data().deepCopy(fields()[5].schema(), other.beamDataRecords);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ElectronicEmissionSystemData instance */
    private Builder(com.cohesionforce.dis.avro.ElectronicEmissionSystemData other) {
            super(com.cohesionforce.dis.avro.ElectronicEmissionSystemData.SCHEMA$);
      if (isValidValue(fields()[0], other.systemDataLength)) {
        this.systemDataLength = data().deepCopy(fields()[0].schema(), other.systemDataLength);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.numberOfBeamDataRecords)) {
        this.numberOfBeamDataRecords = data().deepCopy(fields()[1].schema(), other.numberOfBeamDataRecords);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.emissionsPadding2)) {
        this.emissionsPadding2 = data().deepCopy(fields()[2].schema(), other.emissionsPadding2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.emitterSystem)) {
        this.emitterSystem = data().deepCopy(fields()[3].schema(), other.emitterSystem);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.location)) {
        this.location = data().deepCopy(fields()[4].schema(), other.location);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.beamDataRecords)) {
        this.beamDataRecords = data().deepCopy(fields()[5].schema(), other.beamDataRecords);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'systemDataLength' field */
    public java.lang.Integer getSystemDataLength() {
      return systemDataLength;
    }
    
    /** Sets the value of the 'systemDataLength' field */
    public com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder setSystemDataLength(int value) {
      validate(fields()[0], value);
      this.systemDataLength = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'systemDataLength' field has been set */
    public boolean hasSystemDataLength() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'systemDataLength' field */
    public com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder clearSystemDataLength() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'numberOfBeamDataRecords' field */
    public java.lang.Integer getNumberOfBeamDataRecords() {
      return numberOfBeamDataRecords;
    }
    
    /** Sets the value of the 'numberOfBeamDataRecords' field */
    public com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder setNumberOfBeamDataRecords(int value) {
      validate(fields()[1], value);
      this.numberOfBeamDataRecords = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'numberOfBeamDataRecords' field has been set */
    public boolean hasNumberOfBeamDataRecords() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'numberOfBeamDataRecords' field */
    public com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder clearNumberOfBeamDataRecords() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'emissionsPadding2' field */
    public java.lang.Integer getEmissionsPadding2() {
      return emissionsPadding2;
    }
    
    /** Sets the value of the 'emissionsPadding2' field */
    public com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder setEmissionsPadding2(int value) {
      validate(fields()[2], value);
      this.emissionsPadding2 = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'emissionsPadding2' field has been set */
    public boolean hasEmissionsPadding2() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'emissionsPadding2' field */
    public com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder clearEmissionsPadding2() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'emitterSystem' field */
    public com.cohesionforce.dis.avro.EmitterSystem getEmitterSystem() {
      return emitterSystem;
    }
    
    /** Sets the value of the 'emitterSystem' field */
    public com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder setEmitterSystem(com.cohesionforce.dis.avro.EmitterSystem value) {
      validate(fields()[3], value);
      this.emitterSystem = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'emitterSystem' field has been set */
    public boolean hasEmitterSystem() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'emitterSystem' field */
    public com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder clearEmitterSystem() {
      emitterSystem = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'location' field */
    public com.cohesionforce.dis.avro.Vector3Float getLocation() {
      return location;
    }
    
    /** Sets the value of the 'location' field */
    public com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder setLocation(com.cohesionforce.dis.avro.Vector3Float value) {
      validate(fields()[4], value);
      this.location = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'location' field has been set */
    public boolean hasLocation() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'location' field */
    public com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder clearLocation() {
      location = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'beamDataRecords' field */
    public java.util.List<com.cohesionforce.dis.avro.ElectronicEmissionBeamData> getBeamDataRecords() {
      return beamDataRecords;
    }
    
    /** Sets the value of the 'beamDataRecords' field */
    public com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder setBeamDataRecords(java.util.List<com.cohesionforce.dis.avro.ElectronicEmissionBeamData> value) {
      validate(fields()[5], value);
      this.beamDataRecords = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'beamDataRecords' field has been set */
    public boolean hasBeamDataRecords() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'beamDataRecords' field */
    public com.cohesionforce.dis.avro.ElectronicEmissionSystemData.Builder clearBeamDataRecords() {
      beamDataRecords = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public ElectronicEmissionSystemData build() {
      try {
        ElectronicEmissionSystemData record = new ElectronicEmissionSystemData();
        record.systemDataLength = fieldSetFlags()[0] ? this.systemDataLength : (java.lang.Integer) defaultValue(fields()[0]);
        record.numberOfBeamDataRecords = fieldSetFlags()[1] ? this.numberOfBeamDataRecords : (java.lang.Integer) defaultValue(fields()[1]);
        record.emissionsPadding2 = fieldSetFlags()[2] ? this.emissionsPadding2 : (java.lang.Integer) defaultValue(fields()[2]);
        record.emitterSystem = fieldSetFlags()[3] ? this.emitterSystem : (com.cohesionforce.dis.avro.EmitterSystem) defaultValue(fields()[3]);
        record.location = fieldSetFlags()[4] ? this.location : (com.cohesionforce.dis.avro.Vector3Float) defaultValue(fields()[4]);
        record.beamDataRecords = fieldSetFlags()[5] ? this.beamDataRecords : (java.util.List<com.cohesionforce.dis.avro.ElectronicEmissionBeamData>) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
