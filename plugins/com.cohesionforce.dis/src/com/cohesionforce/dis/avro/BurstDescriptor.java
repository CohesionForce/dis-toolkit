/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BurstDescriptor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BurstDescriptor\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"munition\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"EntityType\",\"fields\":[{\"name\":\"entityKind\",\"type\":\"int\"},{\"name\":\"domain\",\"type\":\"int\"},{\"name\":\"country\",\"type\":\"int\"},{\"name\":\"category\",\"type\":\"int\"},{\"name\":\"subcategory\",\"type\":\"int\"},{\"name\":\"spec\",\"type\":\"int\"},{\"name\":\"extra\",\"type\":\"int\"}]}]},{\"name\":\"warhead\",\"type\":\"int\"},{\"name\":\"fuse\",\"type\":\"int\"},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"rate\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.cohesionforce.dis.avro.EntityType munition;
  @Deprecated public int warhead;
  @Deprecated public int fuse;
  @Deprecated public int quantity;
  @Deprecated public int rate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public BurstDescriptor() {}

  /**
   * All-args constructor.
   */
  public BurstDescriptor(com.cohesionforce.dis.avro.EntityType munition, java.lang.Integer warhead, java.lang.Integer fuse, java.lang.Integer quantity, java.lang.Integer rate) {
    this.munition = munition;
    this.warhead = warhead;
    this.fuse = fuse;
    this.quantity = quantity;
    this.rate = rate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return munition;
    case 1: return warhead;
    case 2: return fuse;
    case 3: return quantity;
    case 4: return rate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: munition = (com.cohesionforce.dis.avro.EntityType)value$; break;
    case 1: warhead = (java.lang.Integer)value$; break;
    case 2: fuse = (java.lang.Integer)value$; break;
    case 3: quantity = (java.lang.Integer)value$; break;
    case 4: rate = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'munition' field.
   */
  public com.cohesionforce.dis.avro.EntityType getMunition() {
    return munition;
  }

  /**
   * Sets the value of the 'munition' field.
   * @param value the value to set.
   */
  public void setMunition(com.cohesionforce.dis.avro.EntityType value) {
    this.munition = value;
  }

  /**
   * Gets the value of the 'warhead' field.
   */
  public java.lang.Integer getWarhead() {
    return warhead;
  }

  /**
   * Sets the value of the 'warhead' field.
   * @param value the value to set.
   */
  public void setWarhead(java.lang.Integer value) {
    this.warhead = value;
  }

  /**
   * Gets the value of the 'fuse' field.
   */
  public java.lang.Integer getFuse() {
    return fuse;
  }

  /**
   * Sets the value of the 'fuse' field.
   * @param value the value to set.
   */
  public void setFuse(java.lang.Integer value) {
    this.fuse = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   */
  public java.lang.Integer getQuantity() {
    return quantity;
  }

  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(java.lang.Integer value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'rate' field.
   */
  public java.lang.Integer getRate() {
    return rate;
  }

  /**
   * Sets the value of the 'rate' field.
   * @param value the value to set.
   */
  public void setRate(java.lang.Integer value) {
    this.rate = value;
  }

  /** Creates a new BurstDescriptor RecordBuilder */
  public static com.cohesionforce.dis.avro.BurstDescriptor.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.BurstDescriptor.Builder();
  }
  
  /** Creates a new BurstDescriptor RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.BurstDescriptor.Builder newBuilder(com.cohesionforce.dis.avro.BurstDescriptor.Builder other) {
    return new com.cohesionforce.dis.avro.BurstDescriptor.Builder(other);
  }
  
  /** Creates a new BurstDescriptor RecordBuilder by copying an existing BurstDescriptor instance */
  public static com.cohesionforce.dis.avro.BurstDescriptor.Builder newBuilder(com.cohesionforce.dis.avro.BurstDescriptor other) {
    return new com.cohesionforce.dis.avro.BurstDescriptor.Builder(other);
  }
  
  /**
   * RecordBuilder for BurstDescriptor instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BurstDescriptor>
    implements org.apache.avro.data.RecordBuilder<BurstDescriptor> {

    private com.cohesionforce.dis.avro.EntityType munition;
    private int warhead;
    private int fuse;
    private int quantity;
    private int rate;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.BurstDescriptor.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.BurstDescriptor.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.munition)) {
        this.munition = data().deepCopy(fields()[0].schema(), other.munition);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.warhead)) {
        this.warhead = data().deepCopy(fields()[1].schema(), other.warhead);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fuse)) {
        this.fuse = data().deepCopy(fields()[2].schema(), other.fuse);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.quantity)) {
        this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.rate)) {
        this.rate = data().deepCopy(fields()[4].schema(), other.rate);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing BurstDescriptor instance */
    private Builder(com.cohesionforce.dis.avro.BurstDescriptor other) {
            super(com.cohesionforce.dis.avro.BurstDescriptor.SCHEMA$);
      if (isValidValue(fields()[0], other.munition)) {
        this.munition = data().deepCopy(fields()[0].schema(), other.munition);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.warhead)) {
        this.warhead = data().deepCopy(fields()[1].schema(), other.warhead);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fuse)) {
        this.fuse = data().deepCopy(fields()[2].schema(), other.fuse);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.quantity)) {
        this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.rate)) {
        this.rate = data().deepCopy(fields()[4].schema(), other.rate);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'munition' field */
    public com.cohesionforce.dis.avro.EntityType getMunition() {
      return munition;
    }
    
    /** Sets the value of the 'munition' field */
    public com.cohesionforce.dis.avro.BurstDescriptor.Builder setMunition(com.cohesionforce.dis.avro.EntityType value) {
      validate(fields()[0], value);
      this.munition = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'munition' field has been set */
    public boolean hasMunition() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'munition' field */
    public com.cohesionforce.dis.avro.BurstDescriptor.Builder clearMunition() {
      munition = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'warhead' field */
    public java.lang.Integer getWarhead() {
      return warhead;
    }
    
    /** Sets the value of the 'warhead' field */
    public com.cohesionforce.dis.avro.BurstDescriptor.Builder setWarhead(int value) {
      validate(fields()[1], value);
      this.warhead = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'warhead' field has been set */
    public boolean hasWarhead() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'warhead' field */
    public com.cohesionforce.dis.avro.BurstDescriptor.Builder clearWarhead() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'fuse' field */
    public java.lang.Integer getFuse() {
      return fuse;
    }
    
    /** Sets the value of the 'fuse' field */
    public com.cohesionforce.dis.avro.BurstDescriptor.Builder setFuse(int value) {
      validate(fields()[2], value);
      this.fuse = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'fuse' field has been set */
    public boolean hasFuse() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'fuse' field */
    public com.cohesionforce.dis.avro.BurstDescriptor.Builder clearFuse() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'quantity' field */
    public java.lang.Integer getQuantity() {
      return quantity;
    }
    
    /** Sets the value of the 'quantity' field */
    public com.cohesionforce.dis.avro.BurstDescriptor.Builder setQuantity(int value) {
      validate(fields()[3], value);
      this.quantity = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'quantity' field has been set */
    public boolean hasQuantity() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'quantity' field */
    public com.cohesionforce.dis.avro.BurstDescriptor.Builder clearQuantity() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'rate' field */
    public java.lang.Integer getRate() {
      return rate;
    }
    
    /** Sets the value of the 'rate' field */
    public com.cohesionforce.dis.avro.BurstDescriptor.Builder setRate(int value) {
      validate(fields()[4], value);
      this.rate = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'rate' field has been set */
    public boolean hasRate() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'rate' field */
    public com.cohesionforce.dis.avro.BurstDescriptor.Builder clearRate() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public BurstDescriptor build() {
      try {
        BurstDescriptor record = new BurstDescriptor();
        record.munition = fieldSetFlags()[0] ? this.munition : (com.cohesionforce.dis.avro.EntityType) defaultValue(fields()[0]);
        record.warhead = fieldSetFlags()[1] ? this.warhead : (java.lang.Integer) defaultValue(fields()[1]);
        record.fuse = fieldSetFlags()[2] ? this.fuse : (java.lang.Integer) defaultValue(fields()[2]);
        record.quantity = fieldSetFlags()[3] ? this.quantity : (java.lang.Integer) defaultValue(fields()[3]);
        record.rate = fieldSetFlags()[4] ? this.rate : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
