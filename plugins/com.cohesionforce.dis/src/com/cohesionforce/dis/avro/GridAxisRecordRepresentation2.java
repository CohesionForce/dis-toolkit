/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class GridAxisRecordRepresentation2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GridAxisRecordRepresentation2\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"sampleType\",\"type\":\"int\"},{\"name\":\"dataRepresentation\",\"type\":\"int\"},{\"name\":\"numberOfDataValues\",\"type\":\"int\"},{\"name\":\"dataValues\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FourByteChunk\",\"fields\":[{\"name\":\"otherParameters\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}]}]}}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int sampleType;
  @Deprecated public int dataRepresentation;
  @Deprecated public int numberOfDataValues;
  @Deprecated public java.util.List<com.cohesionforce.dis.avro.FourByteChunk> dataValues;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GridAxisRecordRepresentation2() {}

  /**
   * All-args constructor.
   */
  public GridAxisRecordRepresentation2(java.lang.Integer sampleType, java.lang.Integer dataRepresentation, java.lang.Integer numberOfDataValues, java.util.List<com.cohesionforce.dis.avro.FourByteChunk> dataValues) {
    this.sampleType = sampleType;
    this.dataRepresentation = dataRepresentation;
    this.numberOfDataValues = numberOfDataValues;
    this.dataValues = dataValues;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sampleType;
    case 1: return dataRepresentation;
    case 2: return numberOfDataValues;
    case 3: return dataValues;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sampleType = (java.lang.Integer)value$; break;
    case 1: dataRepresentation = (java.lang.Integer)value$; break;
    case 2: numberOfDataValues = (java.lang.Integer)value$; break;
    case 3: dataValues = (java.util.List<com.cohesionforce.dis.avro.FourByteChunk>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sampleType' field.
   */
  public java.lang.Integer getSampleType() {
    return sampleType;
  }

  /**
   * Sets the value of the 'sampleType' field.
   * @param value the value to set.
   */
  public void setSampleType(java.lang.Integer value) {
    this.sampleType = value;
  }

  /**
   * Gets the value of the 'dataRepresentation' field.
   */
  public java.lang.Integer getDataRepresentation() {
    return dataRepresentation;
  }

  /**
   * Sets the value of the 'dataRepresentation' field.
   * @param value the value to set.
   */
  public void setDataRepresentation(java.lang.Integer value) {
    this.dataRepresentation = value;
  }

  /**
   * Gets the value of the 'numberOfDataValues' field.
   */
  public java.lang.Integer getNumberOfDataValues() {
    return numberOfDataValues;
  }

  /**
   * Sets the value of the 'numberOfDataValues' field.
   * @param value the value to set.
   */
  public void setNumberOfDataValues(java.lang.Integer value) {
    this.numberOfDataValues = value;
  }

  /**
   * Gets the value of the 'dataValues' field.
   */
  public java.util.List<com.cohesionforce.dis.avro.FourByteChunk> getDataValues() {
    return dataValues;
  }

  /**
   * Sets the value of the 'dataValues' field.
   * @param value the value to set.
   */
  public void setDataValues(java.util.List<com.cohesionforce.dis.avro.FourByteChunk> value) {
    this.dataValues = value;
  }

  /** Creates a new GridAxisRecordRepresentation2 RecordBuilder */
  public static com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.Builder();
  }
  
  /** Creates a new GridAxisRecordRepresentation2 RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.Builder newBuilder(com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.Builder other) {
    return new com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.Builder(other);
  }
  
  /** Creates a new GridAxisRecordRepresentation2 RecordBuilder by copying an existing GridAxisRecordRepresentation2 instance */
  public static com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.Builder newBuilder(com.cohesionforce.dis.avro.GridAxisRecordRepresentation2 other) {
    return new com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.Builder(other);
  }
  
  /**
   * RecordBuilder for GridAxisRecordRepresentation2 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GridAxisRecordRepresentation2>
    implements org.apache.avro.data.RecordBuilder<GridAxisRecordRepresentation2> {

    private int sampleType;
    private int dataRepresentation;
    private int numberOfDataValues;
    private java.util.List<com.cohesionforce.dis.avro.FourByteChunk> dataValues;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sampleType)) {
        this.sampleType = data().deepCopy(fields()[0].schema(), other.sampleType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dataRepresentation)) {
        this.dataRepresentation = data().deepCopy(fields()[1].schema(), other.dataRepresentation);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numberOfDataValues)) {
        this.numberOfDataValues = data().deepCopy(fields()[2].schema(), other.numberOfDataValues);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dataValues)) {
        this.dataValues = data().deepCopy(fields()[3].schema(), other.dataValues);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GridAxisRecordRepresentation2 instance */
    private Builder(com.cohesionforce.dis.avro.GridAxisRecordRepresentation2 other) {
            super(com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.SCHEMA$);
      if (isValidValue(fields()[0], other.sampleType)) {
        this.sampleType = data().deepCopy(fields()[0].schema(), other.sampleType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dataRepresentation)) {
        this.dataRepresentation = data().deepCopy(fields()[1].schema(), other.dataRepresentation);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numberOfDataValues)) {
        this.numberOfDataValues = data().deepCopy(fields()[2].schema(), other.numberOfDataValues);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dataValues)) {
        this.dataValues = data().deepCopy(fields()[3].schema(), other.dataValues);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'sampleType' field */
    public java.lang.Integer getSampleType() {
      return sampleType;
    }
    
    /** Sets the value of the 'sampleType' field */
    public com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.Builder setSampleType(int value) {
      validate(fields()[0], value);
      this.sampleType = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'sampleType' field has been set */
    public boolean hasSampleType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'sampleType' field */
    public com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.Builder clearSampleType() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'dataRepresentation' field */
    public java.lang.Integer getDataRepresentation() {
      return dataRepresentation;
    }
    
    /** Sets the value of the 'dataRepresentation' field */
    public com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.Builder setDataRepresentation(int value) {
      validate(fields()[1], value);
      this.dataRepresentation = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'dataRepresentation' field has been set */
    public boolean hasDataRepresentation() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'dataRepresentation' field */
    public com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.Builder clearDataRepresentation() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'numberOfDataValues' field */
    public java.lang.Integer getNumberOfDataValues() {
      return numberOfDataValues;
    }
    
    /** Sets the value of the 'numberOfDataValues' field */
    public com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.Builder setNumberOfDataValues(int value) {
      validate(fields()[2], value);
      this.numberOfDataValues = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'numberOfDataValues' field has been set */
    public boolean hasNumberOfDataValues() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'numberOfDataValues' field */
    public com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.Builder clearNumberOfDataValues() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'dataValues' field */
    public java.util.List<com.cohesionforce.dis.avro.FourByteChunk> getDataValues() {
      return dataValues;
    }
    
    /** Sets the value of the 'dataValues' field */
    public com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.Builder setDataValues(java.util.List<com.cohesionforce.dis.avro.FourByteChunk> value) {
      validate(fields()[3], value);
      this.dataValues = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'dataValues' field has been set */
    public boolean hasDataValues() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'dataValues' field */
    public com.cohesionforce.dis.avro.GridAxisRecordRepresentation2.Builder clearDataValues() {
      dataValues = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public GridAxisRecordRepresentation2 build() {
      try {
        GridAxisRecordRepresentation2 record = new GridAxisRecordRepresentation2();
        record.sampleType = fieldSetFlags()[0] ? this.sampleType : (java.lang.Integer) defaultValue(fields()[0]);
        record.dataRepresentation = fieldSetFlags()[1] ? this.dataRepresentation : (java.lang.Integer) defaultValue(fields()[1]);
        record.numberOfDataValues = fieldSetFlags()[2] ? this.numberOfDataValues : (java.lang.Integer) defaultValue(fields()[2]);
        record.dataValues = fieldSetFlags()[3] ? this.dataValues : (java.util.List<com.cohesionforce.dis.avro.FourByteChunk>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
