/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PropulsionSystemData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PropulsionSystemData\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"powerSetting\",\"type\":\"float\"},{\"name\":\"engineRpm\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public float powerSetting;
  @Deprecated public float engineRpm;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public PropulsionSystemData() {}

  /**
   * All-args constructor.
   */
  public PropulsionSystemData(java.lang.Float powerSetting, java.lang.Float engineRpm) {
    this.powerSetting = powerSetting;
    this.engineRpm = engineRpm;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return powerSetting;
    case 1: return engineRpm;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: powerSetting = (java.lang.Float)value$; break;
    case 1: engineRpm = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'powerSetting' field.
   */
  public java.lang.Float getPowerSetting() {
    return powerSetting;
  }

  /**
   * Sets the value of the 'powerSetting' field.
   * @param value the value to set.
   */
  public void setPowerSetting(java.lang.Float value) {
    this.powerSetting = value;
  }

  /**
   * Gets the value of the 'engineRpm' field.
   */
  public java.lang.Float getEngineRpm() {
    return engineRpm;
  }

  /**
   * Sets the value of the 'engineRpm' field.
   * @param value the value to set.
   */
  public void setEngineRpm(java.lang.Float value) {
    this.engineRpm = value;
  }

  /** Creates a new PropulsionSystemData RecordBuilder */
  public static com.cohesionforce.dis.avro.PropulsionSystemData.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.PropulsionSystemData.Builder();
  }
  
  /** Creates a new PropulsionSystemData RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.PropulsionSystemData.Builder newBuilder(com.cohesionforce.dis.avro.PropulsionSystemData.Builder other) {
    return new com.cohesionforce.dis.avro.PropulsionSystemData.Builder(other);
  }
  
  /** Creates a new PropulsionSystemData RecordBuilder by copying an existing PropulsionSystemData instance */
  public static com.cohesionforce.dis.avro.PropulsionSystemData.Builder newBuilder(com.cohesionforce.dis.avro.PropulsionSystemData other) {
    return new com.cohesionforce.dis.avro.PropulsionSystemData.Builder(other);
  }
  
  /**
   * RecordBuilder for PropulsionSystemData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PropulsionSystemData>
    implements org.apache.avro.data.RecordBuilder<PropulsionSystemData> {

    private float powerSetting;
    private float engineRpm;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.PropulsionSystemData.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.PropulsionSystemData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.powerSetting)) {
        this.powerSetting = data().deepCopy(fields()[0].schema(), other.powerSetting);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.engineRpm)) {
        this.engineRpm = data().deepCopy(fields()[1].schema(), other.engineRpm);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing PropulsionSystemData instance */
    private Builder(com.cohesionforce.dis.avro.PropulsionSystemData other) {
            super(com.cohesionforce.dis.avro.PropulsionSystemData.SCHEMA$);
      if (isValidValue(fields()[0], other.powerSetting)) {
        this.powerSetting = data().deepCopy(fields()[0].schema(), other.powerSetting);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.engineRpm)) {
        this.engineRpm = data().deepCopy(fields()[1].schema(), other.engineRpm);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'powerSetting' field */
    public java.lang.Float getPowerSetting() {
      return powerSetting;
    }
    
    /** Sets the value of the 'powerSetting' field */
    public com.cohesionforce.dis.avro.PropulsionSystemData.Builder setPowerSetting(float value) {
      validate(fields()[0], value);
      this.powerSetting = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'powerSetting' field has been set */
    public boolean hasPowerSetting() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'powerSetting' field */
    public com.cohesionforce.dis.avro.PropulsionSystemData.Builder clearPowerSetting() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'engineRpm' field */
    public java.lang.Float getEngineRpm() {
      return engineRpm;
    }
    
    /** Sets the value of the 'engineRpm' field */
    public com.cohesionforce.dis.avro.PropulsionSystemData.Builder setEngineRpm(float value) {
      validate(fields()[1], value);
      this.engineRpm = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'engineRpm' field has been set */
    public boolean hasEngineRpm() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'engineRpm' field */
    public com.cohesionforce.dis.avro.PropulsionSystemData.Builder clearEngineRpm() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public PropulsionSystemData build() {
      try {
        PropulsionSystemData record = new PropulsionSystemData();
        record.powerSetting = fieldSetFlags()[0] ? this.powerSetting : (java.lang.Float) defaultValue(fields()[0]);
        record.engineRpm = fieldSetFlags()[1] ? this.engineRpm : (java.lang.Float) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
