/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class GridAxis extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GridAxis\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"domainInitialXi\",\"type\":\"double\"},{\"name\":\"domainFinalXi\",\"type\":\"double\"},{\"name\":\"domainPointsXi\",\"type\":\"int\"},{\"name\":\"interleafFactor\",\"type\":\"int\"},{\"name\":\"axisType\",\"type\":\"int\"},{\"name\":\"numberOfPointsOnXiAxis\",\"type\":\"int\"},{\"name\":\"initialIndex\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public double domainInitialXi;
  @Deprecated public double domainFinalXi;
  @Deprecated public int domainPointsXi;
  @Deprecated public int interleafFactor;
  @Deprecated public int axisType;
  @Deprecated public int numberOfPointsOnXiAxis;
  @Deprecated public int initialIndex;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GridAxis() {}

  /**
   * All-args constructor.
   */
  public GridAxis(java.lang.Double domainInitialXi, java.lang.Double domainFinalXi, java.lang.Integer domainPointsXi, java.lang.Integer interleafFactor, java.lang.Integer axisType, java.lang.Integer numberOfPointsOnXiAxis, java.lang.Integer initialIndex) {
    this.domainInitialXi = domainInitialXi;
    this.domainFinalXi = domainFinalXi;
    this.domainPointsXi = domainPointsXi;
    this.interleafFactor = interleafFactor;
    this.axisType = axisType;
    this.numberOfPointsOnXiAxis = numberOfPointsOnXiAxis;
    this.initialIndex = initialIndex;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return domainInitialXi;
    case 1: return domainFinalXi;
    case 2: return domainPointsXi;
    case 3: return interleafFactor;
    case 4: return axisType;
    case 5: return numberOfPointsOnXiAxis;
    case 6: return initialIndex;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: domainInitialXi = (java.lang.Double)value$; break;
    case 1: domainFinalXi = (java.lang.Double)value$; break;
    case 2: domainPointsXi = (java.lang.Integer)value$; break;
    case 3: interleafFactor = (java.lang.Integer)value$; break;
    case 4: axisType = (java.lang.Integer)value$; break;
    case 5: numberOfPointsOnXiAxis = (java.lang.Integer)value$; break;
    case 6: initialIndex = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'domainInitialXi' field.
   */
  public java.lang.Double getDomainInitialXi() {
    return domainInitialXi;
  }

  /**
   * Sets the value of the 'domainInitialXi' field.
   * @param value the value to set.
   */
  public void setDomainInitialXi(java.lang.Double value) {
    this.domainInitialXi = value;
  }

  /**
   * Gets the value of the 'domainFinalXi' field.
   */
  public java.lang.Double getDomainFinalXi() {
    return domainFinalXi;
  }

  /**
   * Sets the value of the 'domainFinalXi' field.
   * @param value the value to set.
   */
  public void setDomainFinalXi(java.lang.Double value) {
    this.domainFinalXi = value;
  }

  /**
   * Gets the value of the 'domainPointsXi' field.
   */
  public java.lang.Integer getDomainPointsXi() {
    return domainPointsXi;
  }

  /**
   * Sets the value of the 'domainPointsXi' field.
   * @param value the value to set.
   */
  public void setDomainPointsXi(java.lang.Integer value) {
    this.domainPointsXi = value;
  }

  /**
   * Gets the value of the 'interleafFactor' field.
   */
  public java.lang.Integer getInterleafFactor() {
    return interleafFactor;
  }

  /**
   * Sets the value of the 'interleafFactor' field.
   * @param value the value to set.
   */
  public void setInterleafFactor(java.lang.Integer value) {
    this.interleafFactor = value;
  }

  /**
   * Gets the value of the 'axisType' field.
   */
  public java.lang.Integer getAxisType() {
    return axisType;
  }

  /**
   * Sets the value of the 'axisType' field.
   * @param value the value to set.
   */
  public void setAxisType(java.lang.Integer value) {
    this.axisType = value;
  }

  /**
   * Gets the value of the 'numberOfPointsOnXiAxis' field.
   */
  public java.lang.Integer getNumberOfPointsOnXiAxis() {
    return numberOfPointsOnXiAxis;
  }

  /**
   * Sets the value of the 'numberOfPointsOnXiAxis' field.
   * @param value the value to set.
   */
  public void setNumberOfPointsOnXiAxis(java.lang.Integer value) {
    this.numberOfPointsOnXiAxis = value;
  }

  /**
   * Gets the value of the 'initialIndex' field.
   */
  public java.lang.Integer getInitialIndex() {
    return initialIndex;
  }

  /**
   * Sets the value of the 'initialIndex' field.
   * @param value the value to set.
   */
  public void setInitialIndex(java.lang.Integer value) {
    this.initialIndex = value;
  }

  /** Creates a new GridAxis RecordBuilder */
  public static com.cohesionforce.dis.avro.GridAxis.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.GridAxis.Builder();
  }
  
  /** Creates a new GridAxis RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.GridAxis.Builder newBuilder(com.cohesionforce.dis.avro.GridAxis.Builder other) {
    return new com.cohesionforce.dis.avro.GridAxis.Builder(other);
  }
  
  /** Creates a new GridAxis RecordBuilder by copying an existing GridAxis instance */
  public static com.cohesionforce.dis.avro.GridAxis.Builder newBuilder(com.cohesionforce.dis.avro.GridAxis other) {
    return new com.cohesionforce.dis.avro.GridAxis.Builder(other);
  }
  
  /**
   * RecordBuilder for GridAxis instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GridAxis>
    implements org.apache.avro.data.RecordBuilder<GridAxis> {

    private double domainInitialXi;
    private double domainFinalXi;
    private int domainPointsXi;
    private int interleafFactor;
    private int axisType;
    private int numberOfPointsOnXiAxis;
    private int initialIndex;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.GridAxis.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.GridAxis.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.domainInitialXi)) {
        this.domainInitialXi = data().deepCopy(fields()[0].schema(), other.domainInitialXi);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.domainFinalXi)) {
        this.domainFinalXi = data().deepCopy(fields()[1].schema(), other.domainFinalXi);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.domainPointsXi)) {
        this.domainPointsXi = data().deepCopy(fields()[2].schema(), other.domainPointsXi);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.interleafFactor)) {
        this.interleafFactor = data().deepCopy(fields()[3].schema(), other.interleafFactor);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.axisType)) {
        this.axisType = data().deepCopy(fields()[4].schema(), other.axisType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.numberOfPointsOnXiAxis)) {
        this.numberOfPointsOnXiAxis = data().deepCopy(fields()[5].schema(), other.numberOfPointsOnXiAxis);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.initialIndex)) {
        this.initialIndex = data().deepCopy(fields()[6].schema(), other.initialIndex);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing GridAxis instance */
    private Builder(com.cohesionforce.dis.avro.GridAxis other) {
            super(com.cohesionforce.dis.avro.GridAxis.SCHEMA$);
      if (isValidValue(fields()[0], other.domainInitialXi)) {
        this.domainInitialXi = data().deepCopy(fields()[0].schema(), other.domainInitialXi);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.domainFinalXi)) {
        this.domainFinalXi = data().deepCopy(fields()[1].schema(), other.domainFinalXi);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.domainPointsXi)) {
        this.domainPointsXi = data().deepCopy(fields()[2].schema(), other.domainPointsXi);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.interleafFactor)) {
        this.interleafFactor = data().deepCopy(fields()[3].schema(), other.interleafFactor);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.axisType)) {
        this.axisType = data().deepCopy(fields()[4].schema(), other.axisType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.numberOfPointsOnXiAxis)) {
        this.numberOfPointsOnXiAxis = data().deepCopy(fields()[5].schema(), other.numberOfPointsOnXiAxis);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.initialIndex)) {
        this.initialIndex = data().deepCopy(fields()[6].schema(), other.initialIndex);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'domainInitialXi' field */
    public java.lang.Double getDomainInitialXi() {
      return domainInitialXi;
    }
    
    /** Sets the value of the 'domainInitialXi' field */
    public com.cohesionforce.dis.avro.GridAxis.Builder setDomainInitialXi(double value) {
      validate(fields()[0], value);
      this.domainInitialXi = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'domainInitialXi' field has been set */
    public boolean hasDomainInitialXi() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'domainInitialXi' field */
    public com.cohesionforce.dis.avro.GridAxis.Builder clearDomainInitialXi() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'domainFinalXi' field */
    public java.lang.Double getDomainFinalXi() {
      return domainFinalXi;
    }
    
    /** Sets the value of the 'domainFinalXi' field */
    public com.cohesionforce.dis.avro.GridAxis.Builder setDomainFinalXi(double value) {
      validate(fields()[1], value);
      this.domainFinalXi = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'domainFinalXi' field has been set */
    public boolean hasDomainFinalXi() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'domainFinalXi' field */
    public com.cohesionforce.dis.avro.GridAxis.Builder clearDomainFinalXi() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'domainPointsXi' field */
    public java.lang.Integer getDomainPointsXi() {
      return domainPointsXi;
    }
    
    /** Sets the value of the 'domainPointsXi' field */
    public com.cohesionforce.dis.avro.GridAxis.Builder setDomainPointsXi(int value) {
      validate(fields()[2], value);
      this.domainPointsXi = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'domainPointsXi' field has been set */
    public boolean hasDomainPointsXi() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'domainPointsXi' field */
    public com.cohesionforce.dis.avro.GridAxis.Builder clearDomainPointsXi() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'interleafFactor' field */
    public java.lang.Integer getInterleafFactor() {
      return interleafFactor;
    }
    
    /** Sets the value of the 'interleafFactor' field */
    public com.cohesionforce.dis.avro.GridAxis.Builder setInterleafFactor(int value) {
      validate(fields()[3], value);
      this.interleafFactor = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'interleafFactor' field has been set */
    public boolean hasInterleafFactor() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'interleafFactor' field */
    public com.cohesionforce.dis.avro.GridAxis.Builder clearInterleafFactor() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'axisType' field */
    public java.lang.Integer getAxisType() {
      return axisType;
    }
    
    /** Sets the value of the 'axisType' field */
    public com.cohesionforce.dis.avro.GridAxis.Builder setAxisType(int value) {
      validate(fields()[4], value);
      this.axisType = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'axisType' field has been set */
    public boolean hasAxisType() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'axisType' field */
    public com.cohesionforce.dis.avro.GridAxis.Builder clearAxisType() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'numberOfPointsOnXiAxis' field */
    public java.lang.Integer getNumberOfPointsOnXiAxis() {
      return numberOfPointsOnXiAxis;
    }
    
    /** Sets the value of the 'numberOfPointsOnXiAxis' field */
    public com.cohesionforce.dis.avro.GridAxis.Builder setNumberOfPointsOnXiAxis(int value) {
      validate(fields()[5], value);
      this.numberOfPointsOnXiAxis = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'numberOfPointsOnXiAxis' field has been set */
    public boolean hasNumberOfPointsOnXiAxis() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'numberOfPointsOnXiAxis' field */
    public com.cohesionforce.dis.avro.GridAxis.Builder clearNumberOfPointsOnXiAxis() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'initialIndex' field */
    public java.lang.Integer getInitialIndex() {
      return initialIndex;
    }
    
    /** Sets the value of the 'initialIndex' field */
    public com.cohesionforce.dis.avro.GridAxis.Builder setInitialIndex(int value) {
      validate(fields()[6], value);
      this.initialIndex = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'initialIndex' field has been set */
    public boolean hasInitialIndex() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'initialIndex' field */
    public com.cohesionforce.dis.avro.GridAxis.Builder clearInitialIndex() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public GridAxis build() {
      try {
        GridAxis record = new GridAxis();
        record.domainInitialXi = fieldSetFlags()[0] ? this.domainInitialXi : (java.lang.Double) defaultValue(fields()[0]);
        record.domainFinalXi = fieldSetFlags()[1] ? this.domainFinalXi : (java.lang.Double) defaultValue(fields()[1]);
        record.domainPointsXi = fieldSetFlags()[2] ? this.domainPointsXi : (java.lang.Integer) defaultValue(fields()[2]);
        record.interleafFactor = fieldSetFlags()[3] ? this.interleafFactor : (java.lang.Integer) defaultValue(fields()[3]);
        record.axisType = fieldSetFlags()[4] ? this.axisType : (java.lang.Integer) defaultValue(fields()[4]);
        record.numberOfPointsOnXiAxis = fieldSetFlags()[5] ? this.numberOfPointsOnXiAxis : (java.lang.Integer) defaultValue(fields()[5]);
        record.initialIndex = fieldSetFlags()[6] ? this.initialIndex : (java.lang.Integer) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
