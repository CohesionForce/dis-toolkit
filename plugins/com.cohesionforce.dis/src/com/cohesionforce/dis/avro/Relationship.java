/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Relationship extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Relationship\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"nature\",\"type\":\"int\"},{\"name\":\"position\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int nature;
  @Deprecated public int position;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Relationship() {}

  /**
   * All-args constructor.
   */
  public Relationship(java.lang.Integer nature, java.lang.Integer position) {
    this.nature = nature;
    this.position = position;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return nature;
    case 1: return position;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: nature = (java.lang.Integer)value$; break;
    case 1: position = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'nature' field.
   */
  public java.lang.Integer getNature() {
    return nature;
  }

  /**
   * Sets the value of the 'nature' field.
   * @param value the value to set.
   */
  public void setNature(java.lang.Integer value) {
    this.nature = value;
  }

  /**
   * Gets the value of the 'position' field.
   */
  public java.lang.Integer getPosition() {
    return position;
  }

  /**
   * Sets the value of the 'position' field.
   * @param value the value to set.
   */
  public void setPosition(java.lang.Integer value) {
    this.position = value;
  }

  /** Creates a new Relationship RecordBuilder */
  public static com.cohesionforce.dis.avro.Relationship.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.Relationship.Builder();
  }
  
  /** Creates a new Relationship RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.Relationship.Builder newBuilder(com.cohesionforce.dis.avro.Relationship.Builder other) {
    return new com.cohesionforce.dis.avro.Relationship.Builder(other);
  }
  
  /** Creates a new Relationship RecordBuilder by copying an existing Relationship instance */
  public static com.cohesionforce.dis.avro.Relationship.Builder newBuilder(com.cohesionforce.dis.avro.Relationship other) {
    return new com.cohesionforce.dis.avro.Relationship.Builder(other);
  }
  
  /**
   * RecordBuilder for Relationship instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Relationship>
    implements org.apache.avro.data.RecordBuilder<Relationship> {

    private int nature;
    private int position;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.Relationship.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.Relationship.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.nature)) {
        this.nature = data().deepCopy(fields()[0].schema(), other.nature);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Relationship instance */
    private Builder(com.cohesionforce.dis.avro.Relationship other) {
            super(com.cohesionforce.dis.avro.Relationship.SCHEMA$);
      if (isValidValue(fields()[0], other.nature)) {
        this.nature = data().deepCopy(fields()[0].schema(), other.nature);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.position)) {
        this.position = data().deepCopy(fields()[1].schema(), other.position);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'nature' field */
    public java.lang.Integer getNature() {
      return nature;
    }
    
    /** Sets the value of the 'nature' field */
    public com.cohesionforce.dis.avro.Relationship.Builder setNature(int value) {
      validate(fields()[0], value);
      this.nature = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'nature' field has been set */
    public boolean hasNature() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'nature' field */
    public com.cohesionforce.dis.avro.Relationship.Builder clearNature() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'position' field */
    public java.lang.Integer getPosition() {
      return position;
    }
    
    /** Sets the value of the 'position' field */
    public com.cohesionforce.dis.avro.Relationship.Builder setPosition(int value) {
      validate(fields()[1], value);
      this.position = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'position' field has been set */
    public boolean hasPosition() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'position' field */
    public com.cohesionforce.dis.avro.Relationship.Builder clearPosition() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Relationship build() {
      try {
        Relationship record = new Relationship();
        record.nature = fieldSetFlags()[0] ? this.nature : (java.lang.Integer) defaultValue(fields()[0]);
        record.position = fieldSetFlags()[1] ? this.position : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
