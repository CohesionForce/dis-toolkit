/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FundamentalParameterDataIff extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FundamentalParameterDataIff\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"erp\",\"type\":\"float\"},{\"name\":\"frequency\",\"type\":\"float\"},{\"name\":\"pgrf\",\"type\":\"float\"},{\"name\":\"pulseWidth\",\"type\":\"float\"},{\"name\":\"burstLength\",\"type\":\"long\"},{\"name\":\"applicableModes\",\"type\":\"int\"},{\"name\":\"pad2\",\"type\":\"int\"},{\"name\":\"pad3\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public float erp;
  @Deprecated public float frequency;
  @Deprecated public float pgrf;
  @Deprecated public float pulseWidth;
  @Deprecated public long burstLength;
  @Deprecated public int applicableModes;
  @Deprecated public int pad2;
  @Deprecated public int pad3;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public FundamentalParameterDataIff() {}

  /**
   * All-args constructor.
   */
  public FundamentalParameterDataIff(java.lang.Float erp, java.lang.Float frequency, java.lang.Float pgrf, java.lang.Float pulseWidth, java.lang.Long burstLength, java.lang.Integer applicableModes, java.lang.Integer pad2, java.lang.Integer pad3) {
    this.erp = erp;
    this.frequency = frequency;
    this.pgrf = pgrf;
    this.pulseWidth = pulseWidth;
    this.burstLength = burstLength;
    this.applicableModes = applicableModes;
    this.pad2 = pad2;
    this.pad3 = pad3;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return erp;
    case 1: return frequency;
    case 2: return pgrf;
    case 3: return pulseWidth;
    case 4: return burstLength;
    case 5: return applicableModes;
    case 6: return pad2;
    case 7: return pad3;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: erp = (java.lang.Float)value$; break;
    case 1: frequency = (java.lang.Float)value$; break;
    case 2: pgrf = (java.lang.Float)value$; break;
    case 3: pulseWidth = (java.lang.Float)value$; break;
    case 4: burstLength = (java.lang.Long)value$; break;
    case 5: applicableModes = (java.lang.Integer)value$; break;
    case 6: pad2 = (java.lang.Integer)value$; break;
    case 7: pad3 = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'erp' field.
   */
  public java.lang.Float getErp() {
    return erp;
  }

  /**
   * Sets the value of the 'erp' field.
   * @param value the value to set.
   */
  public void setErp(java.lang.Float value) {
    this.erp = value;
  }

  /**
   * Gets the value of the 'frequency' field.
   */
  public java.lang.Float getFrequency() {
    return frequency;
  }

  /**
   * Sets the value of the 'frequency' field.
   * @param value the value to set.
   */
  public void setFrequency(java.lang.Float value) {
    this.frequency = value;
  }

  /**
   * Gets the value of the 'pgrf' field.
   */
  public java.lang.Float getPgrf() {
    return pgrf;
  }

  /**
   * Sets the value of the 'pgrf' field.
   * @param value the value to set.
   */
  public void setPgrf(java.lang.Float value) {
    this.pgrf = value;
  }

  /**
   * Gets the value of the 'pulseWidth' field.
   */
  public java.lang.Float getPulseWidth() {
    return pulseWidth;
  }

  /**
   * Sets the value of the 'pulseWidth' field.
   * @param value the value to set.
   */
  public void setPulseWidth(java.lang.Float value) {
    this.pulseWidth = value;
  }

  /**
   * Gets the value of the 'burstLength' field.
   */
  public java.lang.Long getBurstLength() {
    return burstLength;
  }

  /**
   * Sets the value of the 'burstLength' field.
   * @param value the value to set.
   */
  public void setBurstLength(java.lang.Long value) {
    this.burstLength = value;
  }

  /**
   * Gets the value of the 'applicableModes' field.
   */
  public java.lang.Integer getApplicableModes() {
    return applicableModes;
  }

  /**
   * Sets the value of the 'applicableModes' field.
   * @param value the value to set.
   */
  public void setApplicableModes(java.lang.Integer value) {
    this.applicableModes = value;
  }

  /**
   * Gets the value of the 'pad2' field.
   */
  public java.lang.Integer getPad2() {
    return pad2;
  }

  /**
   * Sets the value of the 'pad2' field.
   * @param value the value to set.
   */
  public void setPad2(java.lang.Integer value) {
    this.pad2 = value;
  }

  /**
   * Gets the value of the 'pad3' field.
   */
  public java.lang.Integer getPad3() {
    return pad3;
  }

  /**
   * Sets the value of the 'pad3' field.
   * @param value the value to set.
   */
  public void setPad3(java.lang.Integer value) {
    this.pad3 = value;
  }

  /** Creates a new FundamentalParameterDataIff RecordBuilder */
  public static com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder();
  }
  
  /** Creates a new FundamentalParameterDataIff RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder newBuilder(com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder other) {
    return new com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder(other);
  }
  
  /** Creates a new FundamentalParameterDataIff RecordBuilder by copying an existing FundamentalParameterDataIff instance */
  public static com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder newBuilder(com.cohesionforce.dis.avro.FundamentalParameterDataIff other) {
    return new com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder(other);
  }
  
  /**
   * RecordBuilder for FundamentalParameterDataIff instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FundamentalParameterDataIff>
    implements org.apache.avro.data.RecordBuilder<FundamentalParameterDataIff> {

    private float erp;
    private float frequency;
    private float pgrf;
    private float pulseWidth;
    private long burstLength;
    private int applicableModes;
    private int pad2;
    private int pad3;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.FundamentalParameterDataIff.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.erp)) {
        this.erp = data().deepCopy(fields()[0].schema(), other.erp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.frequency)) {
        this.frequency = data().deepCopy(fields()[1].schema(), other.frequency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pgrf)) {
        this.pgrf = data().deepCopy(fields()[2].schema(), other.pgrf);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pulseWidth)) {
        this.pulseWidth = data().deepCopy(fields()[3].schema(), other.pulseWidth);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.burstLength)) {
        this.burstLength = data().deepCopy(fields()[4].schema(), other.burstLength);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.applicableModes)) {
        this.applicableModes = data().deepCopy(fields()[5].schema(), other.applicableModes);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.pad2)) {
        this.pad2 = data().deepCopy(fields()[6].schema(), other.pad2);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.pad3)) {
        this.pad3 = data().deepCopy(fields()[7].schema(), other.pad3);
        fieldSetFlags()[7] = true;
      }
    }
    
    /** Creates a Builder by copying an existing FundamentalParameterDataIff instance */
    private Builder(com.cohesionforce.dis.avro.FundamentalParameterDataIff other) {
            super(com.cohesionforce.dis.avro.FundamentalParameterDataIff.SCHEMA$);
      if (isValidValue(fields()[0], other.erp)) {
        this.erp = data().deepCopy(fields()[0].schema(), other.erp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.frequency)) {
        this.frequency = data().deepCopy(fields()[1].schema(), other.frequency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pgrf)) {
        this.pgrf = data().deepCopy(fields()[2].schema(), other.pgrf);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pulseWidth)) {
        this.pulseWidth = data().deepCopy(fields()[3].schema(), other.pulseWidth);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.burstLength)) {
        this.burstLength = data().deepCopy(fields()[4].schema(), other.burstLength);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.applicableModes)) {
        this.applicableModes = data().deepCopy(fields()[5].schema(), other.applicableModes);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.pad2)) {
        this.pad2 = data().deepCopy(fields()[6].schema(), other.pad2);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.pad3)) {
        this.pad3 = data().deepCopy(fields()[7].schema(), other.pad3);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'erp' field */
    public java.lang.Float getErp() {
      return erp;
    }
    
    /** Sets the value of the 'erp' field */
    public com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder setErp(float value) {
      validate(fields()[0], value);
      this.erp = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'erp' field has been set */
    public boolean hasErp() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'erp' field */
    public com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder clearErp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'frequency' field */
    public java.lang.Float getFrequency() {
      return frequency;
    }
    
    /** Sets the value of the 'frequency' field */
    public com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder setFrequency(float value) {
      validate(fields()[1], value);
      this.frequency = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'frequency' field has been set */
    public boolean hasFrequency() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'frequency' field */
    public com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder clearFrequency() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'pgrf' field */
    public java.lang.Float getPgrf() {
      return pgrf;
    }
    
    /** Sets the value of the 'pgrf' field */
    public com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder setPgrf(float value) {
      validate(fields()[2], value);
      this.pgrf = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'pgrf' field has been set */
    public boolean hasPgrf() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'pgrf' field */
    public com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder clearPgrf() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'pulseWidth' field */
    public java.lang.Float getPulseWidth() {
      return pulseWidth;
    }
    
    /** Sets the value of the 'pulseWidth' field */
    public com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder setPulseWidth(float value) {
      validate(fields()[3], value);
      this.pulseWidth = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'pulseWidth' field has been set */
    public boolean hasPulseWidth() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'pulseWidth' field */
    public com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder clearPulseWidth() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'burstLength' field */
    public java.lang.Long getBurstLength() {
      return burstLength;
    }
    
    /** Sets the value of the 'burstLength' field */
    public com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder setBurstLength(long value) {
      validate(fields()[4], value);
      this.burstLength = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'burstLength' field has been set */
    public boolean hasBurstLength() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'burstLength' field */
    public com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder clearBurstLength() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'applicableModes' field */
    public java.lang.Integer getApplicableModes() {
      return applicableModes;
    }
    
    /** Sets the value of the 'applicableModes' field */
    public com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder setApplicableModes(int value) {
      validate(fields()[5], value);
      this.applicableModes = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'applicableModes' field has been set */
    public boolean hasApplicableModes() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'applicableModes' field */
    public com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder clearApplicableModes() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'pad2' field */
    public java.lang.Integer getPad2() {
      return pad2;
    }
    
    /** Sets the value of the 'pad2' field */
    public com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder setPad2(int value) {
      validate(fields()[6], value);
      this.pad2 = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'pad2' field has been set */
    public boolean hasPad2() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'pad2' field */
    public com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder clearPad2() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'pad3' field */
    public java.lang.Integer getPad3() {
      return pad3;
    }
    
    /** Sets the value of the 'pad3' field */
    public com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder setPad3(int value) {
      validate(fields()[7], value);
      this.pad3 = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'pad3' field has been set */
    public boolean hasPad3() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'pad3' field */
    public com.cohesionforce.dis.avro.FundamentalParameterDataIff.Builder clearPad3() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public FundamentalParameterDataIff build() {
      try {
        FundamentalParameterDataIff record = new FundamentalParameterDataIff();
        record.erp = fieldSetFlags()[0] ? this.erp : (java.lang.Float) defaultValue(fields()[0]);
        record.frequency = fieldSetFlags()[1] ? this.frequency : (java.lang.Float) defaultValue(fields()[1]);
        record.pgrf = fieldSetFlags()[2] ? this.pgrf : (java.lang.Float) defaultValue(fields()[2]);
        record.pulseWidth = fieldSetFlags()[3] ? this.pulseWidth : (java.lang.Float) defaultValue(fields()[3]);
        record.burstLength = fieldSetFlags()[4] ? this.burstLength : (java.lang.Long) defaultValue(fields()[4]);
        record.applicableModes = fieldSetFlags()[5] ? this.applicableModes : (java.lang.Integer) defaultValue(fields()[5]);
        record.pad2 = fieldSetFlags()[6] ? this.pad2 : (java.lang.Integer) defaultValue(fields()[6]);
        record.pad3 = fieldSetFlags()[7] ? this.pad3 : (java.lang.Integer) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
