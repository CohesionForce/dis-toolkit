/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RadioEntityType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RadioEntityType\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"entityKind\",\"type\":\"int\"},{\"name\":\"domain\",\"type\":\"int\"},{\"name\":\"country\",\"type\":\"int\"},{\"name\":\"category\",\"type\":\"int\"},{\"name\":\"nomenclatureVersion\",\"type\":\"int\"},{\"name\":\"nomenclature\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int entityKind;
  @Deprecated public int domain;
  @Deprecated public int country;
  @Deprecated public int category;
  @Deprecated public int nomenclatureVersion;
  @Deprecated public int nomenclature;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public RadioEntityType() {}

  /**
   * All-args constructor.
   */
  public RadioEntityType(java.lang.Integer entityKind, java.lang.Integer domain, java.lang.Integer country, java.lang.Integer category, java.lang.Integer nomenclatureVersion, java.lang.Integer nomenclature) {
    this.entityKind = entityKind;
    this.domain = domain;
    this.country = country;
    this.category = category;
    this.nomenclatureVersion = nomenclatureVersion;
    this.nomenclature = nomenclature;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return entityKind;
    case 1: return domain;
    case 2: return country;
    case 3: return category;
    case 4: return nomenclatureVersion;
    case 5: return nomenclature;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: entityKind = (java.lang.Integer)value$; break;
    case 1: domain = (java.lang.Integer)value$; break;
    case 2: country = (java.lang.Integer)value$; break;
    case 3: category = (java.lang.Integer)value$; break;
    case 4: nomenclatureVersion = (java.lang.Integer)value$; break;
    case 5: nomenclature = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'entityKind' field.
   */
  public java.lang.Integer getEntityKind() {
    return entityKind;
  }

  /**
   * Sets the value of the 'entityKind' field.
   * @param value the value to set.
   */
  public void setEntityKind(java.lang.Integer value) {
    this.entityKind = value;
  }

  /**
   * Gets the value of the 'domain' field.
   */
  public java.lang.Integer getDomain() {
    return domain;
  }

  /**
   * Sets the value of the 'domain' field.
   * @param value the value to set.
   */
  public void setDomain(java.lang.Integer value) {
    this.domain = value;
  }

  /**
   * Gets the value of the 'country' field.
   */
  public java.lang.Integer getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.Integer value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'category' field.
   */
  public java.lang.Integer getCategory() {
    return category;
  }

  /**
   * Sets the value of the 'category' field.
   * @param value the value to set.
   */
  public void setCategory(java.lang.Integer value) {
    this.category = value;
  }

  /**
   * Gets the value of the 'nomenclatureVersion' field.
   */
  public java.lang.Integer getNomenclatureVersion() {
    return nomenclatureVersion;
  }

  /**
   * Sets the value of the 'nomenclatureVersion' field.
   * @param value the value to set.
   */
  public void setNomenclatureVersion(java.lang.Integer value) {
    this.nomenclatureVersion = value;
  }

  /**
   * Gets the value of the 'nomenclature' field.
   */
  public java.lang.Integer getNomenclature() {
    return nomenclature;
  }

  /**
   * Sets the value of the 'nomenclature' field.
   * @param value the value to set.
   */
  public void setNomenclature(java.lang.Integer value) {
    this.nomenclature = value;
  }

  /** Creates a new RadioEntityType RecordBuilder */
  public static com.cohesionforce.dis.avro.RadioEntityType.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.RadioEntityType.Builder();
  }
  
  /** Creates a new RadioEntityType RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.RadioEntityType.Builder newBuilder(com.cohesionforce.dis.avro.RadioEntityType.Builder other) {
    return new com.cohesionforce.dis.avro.RadioEntityType.Builder(other);
  }
  
  /** Creates a new RadioEntityType RecordBuilder by copying an existing RadioEntityType instance */
  public static com.cohesionforce.dis.avro.RadioEntityType.Builder newBuilder(com.cohesionforce.dis.avro.RadioEntityType other) {
    return new com.cohesionforce.dis.avro.RadioEntityType.Builder(other);
  }
  
  /**
   * RecordBuilder for RadioEntityType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RadioEntityType>
    implements org.apache.avro.data.RecordBuilder<RadioEntityType> {

    private int entityKind;
    private int domain;
    private int country;
    private int category;
    private int nomenclatureVersion;
    private int nomenclature;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.RadioEntityType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.RadioEntityType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.entityKind)) {
        this.entityKind = data().deepCopy(fields()[0].schema(), other.entityKind);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.domain)) {
        this.domain = data().deepCopy(fields()[1].schema(), other.domain);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.category)) {
        this.category = data().deepCopy(fields()[3].schema(), other.category);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nomenclatureVersion)) {
        this.nomenclatureVersion = data().deepCopy(fields()[4].schema(), other.nomenclatureVersion);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.nomenclature)) {
        this.nomenclature = data().deepCopy(fields()[5].schema(), other.nomenclature);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing RadioEntityType instance */
    private Builder(com.cohesionforce.dis.avro.RadioEntityType other) {
            super(com.cohesionforce.dis.avro.RadioEntityType.SCHEMA$);
      if (isValidValue(fields()[0], other.entityKind)) {
        this.entityKind = data().deepCopy(fields()[0].schema(), other.entityKind);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.domain)) {
        this.domain = data().deepCopy(fields()[1].schema(), other.domain);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.category)) {
        this.category = data().deepCopy(fields()[3].schema(), other.category);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nomenclatureVersion)) {
        this.nomenclatureVersion = data().deepCopy(fields()[4].schema(), other.nomenclatureVersion);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.nomenclature)) {
        this.nomenclature = data().deepCopy(fields()[5].schema(), other.nomenclature);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'entityKind' field */
    public java.lang.Integer getEntityKind() {
      return entityKind;
    }
    
    /** Sets the value of the 'entityKind' field */
    public com.cohesionforce.dis.avro.RadioEntityType.Builder setEntityKind(int value) {
      validate(fields()[0], value);
      this.entityKind = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'entityKind' field has been set */
    public boolean hasEntityKind() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'entityKind' field */
    public com.cohesionforce.dis.avro.RadioEntityType.Builder clearEntityKind() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'domain' field */
    public java.lang.Integer getDomain() {
      return domain;
    }
    
    /** Sets the value of the 'domain' field */
    public com.cohesionforce.dis.avro.RadioEntityType.Builder setDomain(int value) {
      validate(fields()[1], value);
      this.domain = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'domain' field has been set */
    public boolean hasDomain() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'domain' field */
    public com.cohesionforce.dis.avro.RadioEntityType.Builder clearDomain() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'country' field */
    public java.lang.Integer getCountry() {
      return country;
    }
    
    /** Sets the value of the 'country' field */
    public com.cohesionforce.dis.avro.RadioEntityType.Builder setCountry(int value) {
      validate(fields()[2], value);
      this.country = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'country' field has been set */
    public boolean hasCountry() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'country' field */
    public com.cohesionforce.dis.avro.RadioEntityType.Builder clearCountry() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'category' field */
    public java.lang.Integer getCategory() {
      return category;
    }
    
    /** Sets the value of the 'category' field */
    public com.cohesionforce.dis.avro.RadioEntityType.Builder setCategory(int value) {
      validate(fields()[3], value);
      this.category = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'category' field has been set */
    public boolean hasCategory() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'category' field */
    public com.cohesionforce.dis.avro.RadioEntityType.Builder clearCategory() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'nomenclatureVersion' field */
    public java.lang.Integer getNomenclatureVersion() {
      return nomenclatureVersion;
    }
    
    /** Sets the value of the 'nomenclatureVersion' field */
    public com.cohesionforce.dis.avro.RadioEntityType.Builder setNomenclatureVersion(int value) {
      validate(fields()[4], value);
      this.nomenclatureVersion = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'nomenclatureVersion' field has been set */
    public boolean hasNomenclatureVersion() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'nomenclatureVersion' field */
    public com.cohesionforce.dis.avro.RadioEntityType.Builder clearNomenclatureVersion() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'nomenclature' field */
    public java.lang.Integer getNomenclature() {
      return nomenclature;
    }
    
    /** Sets the value of the 'nomenclature' field */
    public com.cohesionforce.dis.avro.RadioEntityType.Builder setNomenclature(int value) {
      validate(fields()[5], value);
      this.nomenclature = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'nomenclature' field has been set */
    public boolean hasNomenclature() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'nomenclature' field */
    public com.cohesionforce.dis.avro.RadioEntityType.Builder clearNomenclature() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public RadioEntityType build() {
      try {
        RadioEntityType record = new RadioEntityType();
        record.entityKind = fieldSetFlags()[0] ? this.entityKind : (java.lang.Integer) defaultValue(fields()[0]);
        record.domain = fieldSetFlags()[1] ? this.domain : (java.lang.Integer) defaultValue(fields()[1]);
        record.country = fieldSetFlags()[2] ? this.country : (java.lang.Integer) defaultValue(fields()[2]);
        record.category = fieldSetFlags()[3] ? this.category : (java.lang.Integer) defaultValue(fields()[3]);
        record.nomenclatureVersion = fieldSetFlags()[4] ? this.nomenclatureVersion : (java.lang.Integer) defaultValue(fields()[4]);
        record.nomenclature = fieldSetFlags()[5] ? this.nomenclature : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
