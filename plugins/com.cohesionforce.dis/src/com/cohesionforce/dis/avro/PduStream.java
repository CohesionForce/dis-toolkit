/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PduStream extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PduStream\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}]},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}]},{\"name\":\"startTime\",\"type\":\"long\"},{\"name\":\"stopTime\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.lang.Integer> description;
  @Deprecated public java.util.List<java.lang.Integer> name;
  @Deprecated public long startTime;
  @Deprecated public long stopTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public PduStream() {}

  /**
   * All-args constructor.
   */
  public PduStream(java.util.List<java.lang.Integer> description, java.util.List<java.lang.Integer> name, java.lang.Long startTime, java.lang.Long stopTime) {
    this.description = description;
    this.name = name;
    this.startTime = startTime;
    this.stopTime = stopTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return description;
    case 1: return name;
    case 2: return startTime;
    case 3: return stopTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: description = (java.util.List<java.lang.Integer>)value$; break;
    case 1: name = (java.util.List<java.lang.Integer>)value$; break;
    case 2: startTime = (java.lang.Long)value$; break;
    case 3: stopTime = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'description' field.
   */
  public java.util.List<java.lang.Integer> getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.util.List<java.lang.Integer> value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.util.List<java.lang.Integer> getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.util.List<java.lang.Integer> value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'startTime' field.
   */
  public java.lang.Long getStartTime() {
    return startTime;
  }

  /**
   * Sets the value of the 'startTime' field.
   * @param value the value to set.
   */
  public void setStartTime(java.lang.Long value) {
    this.startTime = value;
  }

  /**
   * Gets the value of the 'stopTime' field.
   */
  public java.lang.Long getStopTime() {
    return stopTime;
  }

  /**
   * Sets the value of the 'stopTime' field.
   * @param value the value to set.
   */
  public void setStopTime(java.lang.Long value) {
    this.stopTime = value;
  }

  /** Creates a new PduStream RecordBuilder */
  public static com.cohesionforce.dis.avro.PduStream.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.PduStream.Builder();
  }
  
  /** Creates a new PduStream RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.PduStream.Builder newBuilder(com.cohesionforce.dis.avro.PduStream.Builder other) {
    return new com.cohesionforce.dis.avro.PduStream.Builder(other);
  }
  
  /** Creates a new PduStream RecordBuilder by copying an existing PduStream instance */
  public static com.cohesionforce.dis.avro.PduStream.Builder newBuilder(com.cohesionforce.dis.avro.PduStream other) {
    return new com.cohesionforce.dis.avro.PduStream.Builder(other);
  }
  
  /**
   * RecordBuilder for PduStream instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PduStream>
    implements org.apache.avro.data.RecordBuilder<PduStream> {

    private java.util.List<java.lang.Integer> description;
    private java.util.List<java.lang.Integer> name;
    private long startTime;
    private long stopTime;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.PduStream.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.PduStream.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.description)) {
        this.description = data().deepCopy(fields()[0].schema(), other.description);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.startTime)) {
        this.startTime = data().deepCopy(fields()[2].schema(), other.startTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.stopTime)) {
        this.stopTime = data().deepCopy(fields()[3].schema(), other.stopTime);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing PduStream instance */
    private Builder(com.cohesionforce.dis.avro.PduStream other) {
            super(com.cohesionforce.dis.avro.PduStream.SCHEMA$);
      if (isValidValue(fields()[0], other.description)) {
        this.description = data().deepCopy(fields()[0].schema(), other.description);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.startTime)) {
        this.startTime = data().deepCopy(fields()[2].schema(), other.startTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.stopTime)) {
        this.stopTime = data().deepCopy(fields()[3].schema(), other.stopTime);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'description' field */
    public java.util.List<java.lang.Integer> getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public com.cohesionforce.dis.avro.PduStream.Builder setDescription(java.util.List<java.lang.Integer> value) {
      validate(fields()[0], value);
      this.description = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'description' field */
    public com.cohesionforce.dis.avro.PduStream.Builder clearDescription() {
      description = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.util.List<java.lang.Integer> getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public com.cohesionforce.dis.avro.PduStream.Builder setName(java.util.List<java.lang.Integer> value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'name' field */
    public com.cohesionforce.dis.avro.PduStream.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'startTime' field */
    public java.lang.Long getStartTime() {
      return startTime;
    }
    
    /** Sets the value of the 'startTime' field */
    public com.cohesionforce.dis.avro.PduStream.Builder setStartTime(long value) {
      validate(fields()[2], value);
      this.startTime = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'startTime' field has been set */
    public boolean hasStartTime() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'startTime' field */
    public com.cohesionforce.dis.avro.PduStream.Builder clearStartTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'stopTime' field */
    public java.lang.Long getStopTime() {
      return stopTime;
    }
    
    /** Sets the value of the 'stopTime' field */
    public com.cohesionforce.dis.avro.PduStream.Builder setStopTime(long value) {
      validate(fields()[3], value);
      this.stopTime = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'stopTime' field has been set */
    public boolean hasStopTime() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'stopTime' field */
    public com.cohesionforce.dis.avro.PduStream.Builder clearStopTime() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public PduStream build() {
      try {
        PduStream record = new PduStream();
        record.description = fieldSetFlags()[0] ? this.description : (java.util.List<java.lang.Integer>) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.util.List<java.lang.Integer>) defaultValue(fields()[1]);
        record.startTime = fieldSetFlags()[2] ? this.startTime : (java.lang.Long) defaultValue(fields()[2]);
        record.stopTime = fieldSetFlags()[3] ? this.stopTime : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
