/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EmitterSystem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmitterSystem\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"emitterName\",\"type\":\"int\"},{\"name\":\"function\",\"type\":\"int\"},{\"name\":\"emitterIdNumber\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int emitterName;
  @Deprecated public int function;
  @Deprecated public int emitterIdNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public EmitterSystem() {}

  /**
   * All-args constructor.
   */
  public EmitterSystem(java.lang.Integer emitterName, java.lang.Integer function, java.lang.Integer emitterIdNumber) {
    this.emitterName = emitterName;
    this.function = function;
    this.emitterIdNumber = emitterIdNumber;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return emitterName;
    case 1: return function;
    case 2: return emitterIdNumber;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: emitterName = (java.lang.Integer)value$; break;
    case 1: function = (java.lang.Integer)value$; break;
    case 2: emitterIdNumber = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'emitterName' field.
   */
  public java.lang.Integer getEmitterName() {
    return emitterName;
  }

  /**
   * Sets the value of the 'emitterName' field.
   * @param value the value to set.
   */
  public void setEmitterName(java.lang.Integer value) {
    this.emitterName = value;
  }

  /**
   * Gets the value of the 'function' field.
   */
  public java.lang.Integer getFunction() {
    return function;
  }

  /**
   * Sets the value of the 'function' field.
   * @param value the value to set.
   */
  public void setFunction(java.lang.Integer value) {
    this.function = value;
  }

  /**
   * Gets the value of the 'emitterIdNumber' field.
   */
  public java.lang.Integer getEmitterIdNumber() {
    return emitterIdNumber;
  }

  /**
   * Sets the value of the 'emitterIdNumber' field.
   * @param value the value to set.
   */
  public void setEmitterIdNumber(java.lang.Integer value) {
    this.emitterIdNumber = value;
  }

  /** Creates a new EmitterSystem RecordBuilder */
  public static com.cohesionforce.dis.avro.EmitterSystem.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.EmitterSystem.Builder();
  }
  
  /** Creates a new EmitterSystem RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.EmitterSystem.Builder newBuilder(com.cohesionforce.dis.avro.EmitterSystem.Builder other) {
    return new com.cohesionforce.dis.avro.EmitterSystem.Builder(other);
  }
  
  /** Creates a new EmitterSystem RecordBuilder by copying an existing EmitterSystem instance */
  public static com.cohesionforce.dis.avro.EmitterSystem.Builder newBuilder(com.cohesionforce.dis.avro.EmitterSystem other) {
    return new com.cohesionforce.dis.avro.EmitterSystem.Builder(other);
  }
  
  /**
   * RecordBuilder for EmitterSystem instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmitterSystem>
    implements org.apache.avro.data.RecordBuilder<EmitterSystem> {

    private int emitterName;
    private int function;
    private int emitterIdNumber;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.EmitterSystem.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.EmitterSystem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.emitterName)) {
        this.emitterName = data().deepCopy(fields()[0].schema(), other.emitterName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.function)) {
        this.function = data().deepCopy(fields()[1].schema(), other.function);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.emitterIdNumber)) {
        this.emitterIdNumber = data().deepCopy(fields()[2].schema(), other.emitterIdNumber);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing EmitterSystem instance */
    private Builder(com.cohesionforce.dis.avro.EmitterSystem other) {
            super(com.cohesionforce.dis.avro.EmitterSystem.SCHEMA$);
      if (isValidValue(fields()[0], other.emitterName)) {
        this.emitterName = data().deepCopy(fields()[0].schema(), other.emitterName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.function)) {
        this.function = data().deepCopy(fields()[1].schema(), other.function);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.emitterIdNumber)) {
        this.emitterIdNumber = data().deepCopy(fields()[2].schema(), other.emitterIdNumber);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'emitterName' field */
    public java.lang.Integer getEmitterName() {
      return emitterName;
    }
    
    /** Sets the value of the 'emitterName' field */
    public com.cohesionforce.dis.avro.EmitterSystem.Builder setEmitterName(int value) {
      validate(fields()[0], value);
      this.emitterName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'emitterName' field has been set */
    public boolean hasEmitterName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'emitterName' field */
    public com.cohesionforce.dis.avro.EmitterSystem.Builder clearEmitterName() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'function' field */
    public java.lang.Integer getFunction() {
      return function;
    }
    
    /** Sets the value of the 'function' field */
    public com.cohesionforce.dis.avro.EmitterSystem.Builder setFunction(int value) {
      validate(fields()[1], value);
      this.function = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'function' field has been set */
    public boolean hasFunction() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'function' field */
    public com.cohesionforce.dis.avro.EmitterSystem.Builder clearFunction() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'emitterIdNumber' field */
    public java.lang.Integer getEmitterIdNumber() {
      return emitterIdNumber;
    }
    
    /** Sets the value of the 'emitterIdNumber' field */
    public com.cohesionforce.dis.avro.EmitterSystem.Builder setEmitterIdNumber(int value) {
      validate(fields()[2], value);
      this.emitterIdNumber = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'emitterIdNumber' field has been set */
    public boolean hasEmitterIdNumber() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'emitterIdNumber' field */
    public com.cohesionforce.dis.avro.EmitterSystem.Builder clearEmitterIdNumber() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public EmitterSystem build() {
      try {
        EmitterSystem record = new EmitterSystem();
        record.emitterName = fieldSetFlags()[0] ? this.emitterName : (java.lang.Integer) defaultValue(fields()[0]);
        record.function = fieldSetFlags()[1] ? this.function : (java.lang.Integer) defaultValue(fields()[1]);
        record.emitterIdNumber = fieldSetFlags()[2] ? this.emitterIdNumber : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
