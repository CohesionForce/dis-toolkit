/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AntennaLocation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AntennaLocation\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"antennaLocation\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Vector3Double\",\"fields\":[{\"name\":\"x\",\"type\":\"double\"},{\"name\":\"y\",\"type\":\"double\"},{\"name\":\"z\",\"type\":\"double\"}]}]},{\"name\":\"relativeAntennaLocation\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Vector3Float\",\"fields\":[{\"name\":\"x\",\"type\":\"float\"},{\"name\":\"y\",\"type\":\"float\"},{\"name\":\"z\",\"type\":\"float\"}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.cohesionforce.dis.avro.Vector3Double antennaLocation;
  @Deprecated public com.cohesionforce.dis.avro.Vector3Float relativeAntennaLocation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AntennaLocation() {}

  /**
   * All-args constructor.
   */
  public AntennaLocation(com.cohesionforce.dis.avro.Vector3Double antennaLocation, com.cohesionforce.dis.avro.Vector3Float relativeAntennaLocation) {
    this.antennaLocation = antennaLocation;
    this.relativeAntennaLocation = relativeAntennaLocation;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return antennaLocation;
    case 1: return relativeAntennaLocation;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: antennaLocation = (com.cohesionforce.dis.avro.Vector3Double)value$; break;
    case 1: relativeAntennaLocation = (com.cohesionforce.dis.avro.Vector3Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'antennaLocation' field.
   */
  public com.cohesionforce.dis.avro.Vector3Double getAntennaLocation() {
    return antennaLocation;
  }

  /**
   * Sets the value of the 'antennaLocation' field.
   * @param value the value to set.
   */
  public void setAntennaLocation(com.cohesionforce.dis.avro.Vector3Double value) {
    this.antennaLocation = value;
  }

  /**
   * Gets the value of the 'relativeAntennaLocation' field.
   */
  public com.cohesionforce.dis.avro.Vector3Float getRelativeAntennaLocation() {
    return relativeAntennaLocation;
  }

  /**
   * Sets the value of the 'relativeAntennaLocation' field.
   * @param value the value to set.
   */
  public void setRelativeAntennaLocation(com.cohesionforce.dis.avro.Vector3Float value) {
    this.relativeAntennaLocation = value;
  }

  /** Creates a new AntennaLocation RecordBuilder */
  public static com.cohesionforce.dis.avro.AntennaLocation.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.AntennaLocation.Builder();
  }
  
  /** Creates a new AntennaLocation RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.AntennaLocation.Builder newBuilder(com.cohesionforce.dis.avro.AntennaLocation.Builder other) {
    return new com.cohesionforce.dis.avro.AntennaLocation.Builder(other);
  }
  
  /** Creates a new AntennaLocation RecordBuilder by copying an existing AntennaLocation instance */
  public static com.cohesionforce.dis.avro.AntennaLocation.Builder newBuilder(com.cohesionforce.dis.avro.AntennaLocation other) {
    return new com.cohesionforce.dis.avro.AntennaLocation.Builder(other);
  }
  
  /**
   * RecordBuilder for AntennaLocation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AntennaLocation>
    implements org.apache.avro.data.RecordBuilder<AntennaLocation> {

    private com.cohesionforce.dis.avro.Vector3Double antennaLocation;
    private com.cohesionforce.dis.avro.Vector3Float relativeAntennaLocation;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.AntennaLocation.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.AntennaLocation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.antennaLocation)) {
        this.antennaLocation = data().deepCopy(fields()[0].schema(), other.antennaLocation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.relativeAntennaLocation)) {
        this.relativeAntennaLocation = data().deepCopy(fields()[1].schema(), other.relativeAntennaLocation);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AntennaLocation instance */
    private Builder(com.cohesionforce.dis.avro.AntennaLocation other) {
            super(com.cohesionforce.dis.avro.AntennaLocation.SCHEMA$);
      if (isValidValue(fields()[0], other.antennaLocation)) {
        this.antennaLocation = data().deepCopy(fields()[0].schema(), other.antennaLocation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.relativeAntennaLocation)) {
        this.relativeAntennaLocation = data().deepCopy(fields()[1].schema(), other.relativeAntennaLocation);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'antennaLocation' field */
    public com.cohesionforce.dis.avro.Vector3Double getAntennaLocation() {
      return antennaLocation;
    }
    
    /** Sets the value of the 'antennaLocation' field */
    public com.cohesionforce.dis.avro.AntennaLocation.Builder setAntennaLocation(com.cohesionforce.dis.avro.Vector3Double value) {
      validate(fields()[0], value);
      this.antennaLocation = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'antennaLocation' field has been set */
    public boolean hasAntennaLocation() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'antennaLocation' field */
    public com.cohesionforce.dis.avro.AntennaLocation.Builder clearAntennaLocation() {
      antennaLocation = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'relativeAntennaLocation' field */
    public com.cohesionforce.dis.avro.Vector3Float getRelativeAntennaLocation() {
      return relativeAntennaLocation;
    }
    
    /** Sets the value of the 'relativeAntennaLocation' field */
    public com.cohesionforce.dis.avro.AntennaLocation.Builder setRelativeAntennaLocation(com.cohesionforce.dis.avro.Vector3Float value) {
      validate(fields()[1], value);
      this.relativeAntennaLocation = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'relativeAntennaLocation' field has been set */
    public boolean hasRelativeAntennaLocation() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'relativeAntennaLocation' field */
    public com.cohesionforce.dis.avro.AntennaLocation.Builder clearRelativeAntennaLocation() {
      relativeAntennaLocation = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public AntennaLocation build() {
      try {
        AntennaLocation record = new AntennaLocation();
        record.antennaLocation = fieldSetFlags()[0] ? this.antennaLocation : (com.cohesionforce.dis.avro.Vector3Double) defaultValue(fields()[0]);
        record.relativeAntennaLocation = fieldSetFlags()[1] ? this.relativeAntennaLocation : (com.cohesionforce.dis.avro.Vector3Float) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
