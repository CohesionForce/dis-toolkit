/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AcousticBeamFundamentalParameter extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AcousticBeamFundamentalParameter\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"activeEmissionParameterIndex\",\"type\":\"int\"},{\"name\":\"scanPattern\",\"type\":\"int\"},{\"name\":\"beamCenterAzimuth\",\"type\":\"float\"},{\"name\":\"azimuthalBeamwidth\",\"type\":\"float\"},{\"name\":\"beamCenterDE\",\"type\":\"float\"},{\"name\":\"deBeamwidth\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int activeEmissionParameterIndex;
  @Deprecated public int scanPattern;
  @Deprecated public float beamCenterAzimuth;
  @Deprecated public float azimuthalBeamwidth;
  @Deprecated public float beamCenterDE;
  @Deprecated public float deBeamwidth;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AcousticBeamFundamentalParameter() {}

  /**
   * All-args constructor.
   */
  public AcousticBeamFundamentalParameter(java.lang.Integer activeEmissionParameterIndex, java.lang.Integer scanPattern, java.lang.Float beamCenterAzimuth, java.lang.Float azimuthalBeamwidth, java.lang.Float beamCenterDE, java.lang.Float deBeamwidth) {
    this.activeEmissionParameterIndex = activeEmissionParameterIndex;
    this.scanPattern = scanPattern;
    this.beamCenterAzimuth = beamCenterAzimuth;
    this.azimuthalBeamwidth = azimuthalBeamwidth;
    this.beamCenterDE = beamCenterDE;
    this.deBeamwidth = deBeamwidth;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return activeEmissionParameterIndex;
    case 1: return scanPattern;
    case 2: return beamCenterAzimuth;
    case 3: return azimuthalBeamwidth;
    case 4: return beamCenterDE;
    case 5: return deBeamwidth;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: activeEmissionParameterIndex = (java.lang.Integer)value$; break;
    case 1: scanPattern = (java.lang.Integer)value$; break;
    case 2: beamCenterAzimuth = (java.lang.Float)value$; break;
    case 3: azimuthalBeamwidth = (java.lang.Float)value$; break;
    case 4: beamCenterDE = (java.lang.Float)value$; break;
    case 5: deBeamwidth = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'activeEmissionParameterIndex' field.
   */
  public java.lang.Integer getActiveEmissionParameterIndex() {
    return activeEmissionParameterIndex;
  }

  /**
   * Sets the value of the 'activeEmissionParameterIndex' field.
   * @param value the value to set.
   */
  public void setActiveEmissionParameterIndex(java.lang.Integer value) {
    this.activeEmissionParameterIndex = value;
  }

  /**
   * Gets the value of the 'scanPattern' field.
   */
  public java.lang.Integer getScanPattern() {
    return scanPattern;
  }

  /**
   * Sets the value of the 'scanPattern' field.
   * @param value the value to set.
   */
  public void setScanPattern(java.lang.Integer value) {
    this.scanPattern = value;
  }

  /**
   * Gets the value of the 'beamCenterAzimuth' field.
   */
  public java.lang.Float getBeamCenterAzimuth() {
    return beamCenterAzimuth;
  }

  /**
   * Sets the value of the 'beamCenterAzimuth' field.
   * @param value the value to set.
   */
  public void setBeamCenterAzimuth(java.lang.Float value) {
    this.beamCenterAzimuth = value;
  }

  /**
   * Gets the value of the 'azimuthalBeamwidth' field.
   */
  public java.lang.Float getAzimuthalBeamwidth() {
    return azimuthalBeamwidth;
  }

  /**
   * Sets the value of the 'azimuthalBeamwidth' field.
   * @param value the value to set.
   */
  public void setAzimuthalBeamwidth(java.lang.Float value) {
    this.azimuthalBeamwidth = value;
  }

  /**
   * Gets the value of the 'beamCenterDE' field.
   */
  public java.lang.Float getBeamCenterDE() {
    return beamCenterDE;
  }

  /**
   * Sets the value of the 'beamCenterDE' field.
   * @param value the value to set.
   */
  public void setBeamCenterDE(java.lang.Float value) {
    this.beamCenterDE = value;
  }

  /**
   * Gets the value of the 'deBeamwidth' field.
   */
  public java.lang.Float getDeBeamwidth() {
    return deBeamwidth;
  }

  /**
   * Sets the value of the 'deBeamwidth' field.
   * @param value the value to set.
   */
  public void setDeBeamwidth(java.lang.Float value) {
    this.deBeamwidth = value;
  }

  /** Creates a new AcousticBeamFundamentalParameter RecordBuilder */
  public static com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder();
  }
  
  /** Creates a new AcousticBeamFundamentalParameter RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder newBuilder(com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder other) {
    return new com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder(other);
  }
  
  /** Creates a new AcousticBeamFundamentalParameter RecordBuilder by copying an existing AcousticBeamFundamentalParameter instance */
  public static com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder newBuilder(com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter other) {
    return new com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder(other);
  }
  
  /**
   * RecordBuilder for AcousticBeamFundamentalParameter instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AcousticBeamFundamentalParameter>
    implements org.apache.avro.data.RecordBuilder<AcousticBeamFundamentalParameter> {

    private int activeEmissionParameterIndex;
    private int scanPattern;
    private float beamCenterAzimuth;
    private float azimuthalBeamwidth;
    private float beamCenterDE;
    private float deBeamwidth;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.activeEmissionParameterIndex)) {
        this.activeEmissionParameterIndex = data().deepCopy(fields()[0].schema(), other.activeEmissionParameterIndex);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.scanPattern)) {
        this.scanPattern = data().deepCopy(fields()[1].schema(), other.scanPattern);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.beamCenterAzimuth)) {
        this.beamCenterAzimuth = data().deepCopy(fields()[2].schema(), other.beamCenterAzimuth);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.azimuthalBeamwidth)) {
        this.azimuthalBeamwidth = data().deepCopy(fields()[3].schema(), other.azimuthalBeamwidth);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.beamCenterDE)) {
        this.beamCenterDE = data().deepCopy(fields()[4].schema(), other.beamCenterDE);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.deBeamwidth)) {
        this.deBeamwidth = data().deepCopy(fields()[5].schema(), other.deBeamwidth);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AcousticBeamFundamentalParameter instance */
    private Builder(com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter other) {
            super(com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.SCHEMA$);
      if (isValidValue(fields()[0], other.activeEmissionParameterIndex)) {
        this.activeEmissionParameterIndex = data().deepCopy(fields()[0].schema(), other.activeEmissionParameterIndex);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.scanPattern)) {
        this.scanPattern = data().deepCopy(fields()[1].schema(), other.scanPattern);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.beamCenterAzimuth)) {
        this.beamCenterAzimuth = data().deepCopy(fields()[2].schema(), other.beamCenterAzimuth);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.azimuthalBeamwidth)) {
        this.azimuthalBeamwidth = data().deepCopy(fields()[3].schema(), other.azimuthalBeamwidth);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.beamCenterDE)) {
        this.beamCenterDE = data().deepCopy(fields()[4].schema(), other.beamCenterDE);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.deBeamwidth)) {
        this.deBeamwidth = data().deepCopy(fields()[5].schema(), other.deBeamwidth);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'activeEmissionParameterIndex' field */
    public java.lang.Integer getActiveEmissionParameterIndex() {
      return activeEmissionParameterIndex;
    }
    
    /** Sets the value of the 'activeEmissionParameterIndex' field */
    public com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder setActiveEmissionParameterIndex(int value) {
      validate(fields()[0], value);
      this.activeEmissionParameterIndex = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'activeEmissionParameterIndex' field has been set */
    public boolean hasActiveEmissionParameterIndex() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'activeEmissionParameterIndex' field */
    public com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder clearActiveEmissionParameterIndex() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'scanPattern' field */
    public java.lang.Integer getScanPattern() {
      return scanPattern;
    }
    
    /** Sets the value of the 'scanPattern' field */
    public com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder setScanPattern(int value) {
      validate(fields()[1], value);
      this.scanPattern = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'scanPattern' field has been set */
    public boolean hasScanPattern() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'scanPattern' field */
    public com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder clearScanPattern() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'beamCenterAzimuth' field */
    public java.lang.Float getBeamCenterAzimuth() {
      return beamCenterAzimuth;
    }
    
    /** Sets the value of the 'beamCenterAzimuth' field */
    public com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder setBeamCenterAzimuth(float value) {
      validate(fields()[2], value);
      this.beamCenterAzimuth = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'beamCenterAzimuth' field has been set */
    public boolean hasBeamCenterAzimuth() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'beamCenterAzimuth' field */
    public com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder clearBeamCenterAzimuth() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'azimuthalBeamwidth' field */
    public java.lang.Float getAzimuthalBeamwidth() {
      return azimuthalBeamwidth;
    }
    
    /** Sets the value of the 'azimuthalBeamwidth' field */
    public com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder setAzimuthalBeamwidth(float value) {
      validate(fields()[3], value);
      this.azimuthalBeamwidth = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'azimuthalBeamwidth' field has been set */
    public boolean hasAzimuthalBeamwidth() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'azimuthalBeamwidth' field */
    public com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder clearAzimuthalBeamwidth() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'beamCenterDE' field */
    public java.lang.Float getBeamCenterDE() {
      return beamCenterDE;
    }
    
    /** Sets the value of the 'beamCenterDE' field */
    public com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder setBeamCenterDE(float value) {
      validate(fields()[4], value);
      this.beamCenterDE = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'beamCenterDE' field has been set */
    public boolean hasBeamCenterDE() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'beamCenterDE' field */
    public com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder clearBeamCenterDE() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'deBeamwidth' field */
    public java.lang.Float getDeBeamwidth() {
      return deBeamwidth;
    }
    
    /** Sets the value of the 'deBeamwidth' field */
    public com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder setDeBeamwidth(float value) {
      validate(fields()[5], value);
      this.deBeamwidth = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'deBeamwidth' field has been set */
    public boolean hasDeBeamwidth() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'deBeamwidth' field */
    public com.cohesionforce.dis.avro.AcousticBeamFundamentalParameter.Builder clearDeBeamwidth() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public AcousticBeamFundamentalParameter build() {
      try {
        AcousticBeamFundamentalParameter record = new AcousticBeamFundamentalParameter();
        record.activeEmissionParameterIndex = fieldSetFlags()[0] ? this.activeEmissionParameterIndex : (java.lang.Integer) defaultValue(fields()[0]);
        record.scanPattern = fieldSetFlags()[1] ? this.scanPattern : (java.lang.Integer) defaultValue(fields()[1]);
        record.beamCenterAzimuth = fieldSetFlags()[2] ? this.beamCenterAzimuth : (java.lang.Float) defaultValue(fields()[2]);
        record.azimuthalBeamwidth = fieldSetFlags()[3] ? this.azimuthalBeamwidth : (java.lang.Float) defaultValue(fields()[3]);
        record.beamCenterDE = fieldSetFlags()[4] ? this.beamCenterDE : (java.lang.Float) defaultValue(fields()[4]);
        record.deBeamwidth = fieldSetFlags()[5] ? this.deBeamwidth : (java.lang.Float) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
