/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VariableDatum extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VariableDatum\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"variableDatumID\",\"type\":\"long\"},{\"name\":\"variableDatumLength\",\"type\":\"long\"},{\"name\":\"variableData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long variableDatumID;
  @Deprecated public long variableDatumLength;
  @Deprecated public java.util.List<java.lang.Integer> variableData;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public VariableDatum() {}

  /**
   * All-args constructor.
   */
  public VariableDatum(java.lang.Long variableDatumID, java.lang.Long variableDatumLength, java.util.List<java.lang.Integer> variableData) {
    this.variableDatumID = variableDatumID;
    this.variableDatumLength = variableDatumLength;
    this.variableData = variableData;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return variableDatumID;
    case 1: return variableDatumLength;
    case 2: return variableData;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: variableDatumID = (java.lang.Long)value$; break;
    case 1: variableDatumLength = (java.lang.Long)value$; break;
    case 2: variableData = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'variableDatumID' field.
   */
  public java.lang.Long getVariableDatumID() {
    return variableDatumID;
  }

  /**
   * Sets the value of the 'variableDatumID' field.
   * @param value the value to set.
   */
  public void setVariableDatumID(java.lang.Long value) {
    this.variableDatumID = value;
  }

  /**
   * Gets the value of the 'variableDatumLength' field.
   */
  public java.lang.Long getVariableDatumLength() {
    return variableDatumLength;
  }

  /**
   * Sets the value of the 'variableDatumLength' field.
   * @param value the value to set.
   */
  public void setVariableDatumLength(java.lang.Long value) {
    this.variableDatumLength = value;
  }

  /**
   * Gets the value of the 'variableData' field.
   */
  public java.util.List<java.lang.Integer> getVariableData() {
    return variableData;
  }

  /**
   * Sets the value of the 'variableData' field.
   * @param value the value to set.
   */
  public void setVariableData(java.util.List<java.lang.Integer> value) {
    this.variableData = value;
  }

  /** Creates a new VariableDatum RecordBuilder */
  public static com.cohesionforce.dis.avro.VariableDatum.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.VariableDatum.Builder();
  }
  
  /** Creates a new VariableDatum RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.VariableDatum.Builder newBuilder(com.cohesionforce.dis.avro.VariableDatum.Builder other) {
    return new com.cohesionforce.dis.avro.VariableDatum.Builder(other);
  }
  
  /** Creates a new VariableDatum RecordBuilder by copying an existing VariableDatum instance */
  public static com.cohesionforce.dis.avro.VariableDatum.Builder newBuilder(com.cohesionforce.dis.avro.VariableDatum other) {
    return new com.cohesionforce.dis.avro.VariableDatum.Builder(other);
  }
  
  /**
   * RecordBuilder for VariableDatum instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VariableDatum>
    implements org.apache.avro.data.RecordBuilder<VariableDatum> {

    private long variableDatumID;
    private long variableDatumLength;
    private java.util.List<java.lang.Integer> variableData;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.VariableDatum.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.VariableDatum.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.variableDatumID)) {
        this.variableDatumID = data().deepCopy(fields()[0].schema(), other.variableDatumID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.variableDatumLength)) {
        this.variableDatumLength = data().deepCopy(fields()[1].schema(), other.variableDatumLength);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.variableData)) {
        this.variableData = data().deepCopy(fields()[2].schema(), other.variableData);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing VariableDatum instance */
    private Builder(com.cohesionforce.dis.avro.VariableDatum other) {
            super(com.cohesionforce.dis.avro.VariableDatum.SCHEMA$);
      if (isValidValue(fields()[0], other.variableDatumID)) {
        this.variableDatumID = data().deepCopy(fields()[0].schema(), other.variableDatumID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.variableDatumLength)) {
        this.variableDatumLength = data().deepCopy(fields()[1].schema(), other.variableDatumLength);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.variableData)) {
        this.variableData = data().deepCopy(fields()[2].schema(), other.variableData);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'variableDatumID' field */
    public java.lang.Long getVariableDatumID() {
      return variableDatumID;
    }
    
    /** Sets the value of the 'variableDatumID' field */
    public com.cohesionforce.dis.avro.VariableDatum.Builder setVariableDatumID(long value) {
      validate(fields()[0], value);
      this.variableDatumID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'variableDatumID' field has been set */
    public boolean hasVariableDatumID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'variableDatumID' field */
    public com.cohesionforce.dis.avro.VariableDatum.Builder clearVariableDatumID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'variableDatumLength' field */
    public java.lang.Long getVariableDatumLength() {
      return variableDatumLength;
    }
    
    /** Sets the value of the 'variableDatumLength' field */
    public com.cohesionforce.dis.avro.VariableDatum.Builder setVariableDatumLength(long value) {
      validate(fields()[1], value);
      this.variableDatumLength = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'variableDatumLength' field has been set */
    public boolean hasVariableDatumLength() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'variableDatumLength' field */
    public com.cohesionforce.dis.avro.VariableDatum.Builder clearVariableDatumLength() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'variableData' field */
    public java.util.List<java.lang.Integer> getVariableData() {
      return variableData;
    }
    
    /** Sets the value of the 'variableData' field */
    public com.cohesionforce.dis.avro.VariableDatum.Builder setVariableData(java.util.List<java.lang.Integer> value) {
      validate(fields()[2], value);
      this.variableData = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'variableData' field has been set */
    public boolean hasVariableData() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'variableData' field */
    public com.cohesionforce.dis.avro.VariableDatum.Builder clearVariableData() {
      variableData = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public VariableDatum build() {
      try {
        VariableDatum record = new VariableDatum();
        record.variableDatumID = fieldSetFlags()[0] ? this.variableDatumID : (java.lang.Long) defaultValue(fields()[0]);
        record.variableDatumLength = fieldSetFlags()[1] ? this.variableDatumLength : (java.lang.Long) defaultValue(fields()[1]);
        record.variableData = fieldSetFlags()[2] ? this.variableData : (java.util.List<java.lang.Integer>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
