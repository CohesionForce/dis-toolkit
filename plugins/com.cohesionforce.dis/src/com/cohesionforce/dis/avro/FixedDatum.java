/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FixedDatum extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FixedDatum\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"fixedDatumID\",\"type\":\"long\"},{\"name\":\"fixedDatumValue\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long fixedDatumID;
  @Deprecated public long fixedDatumValue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public FixedDatum() {}

  /**
   * All-args constructor.
   */
  public FixedDatum(java.lang.Long fixedDatumID, java.lang.Long fixedDatumValue) {
    this.fixedDatumID = fixedDatumID;
    this.fixedDatumValue = fixedDatumValue;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fixedDatumID;
    case 1: return fixedDatumValue;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fixedDatumID = (java.lang.Long)value$; break;
    case 1: fixedDatumValue = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fixedDatumID' field.
   */
  public java.lang.Long getFixedDatumID() {
    return fixedDatumID;
  }

  /**
   * Sets the value of the 'fixedDatumID' field.
   * @param value the value to set.
   */
  public void setFixedDatumID(java.lang.Long value) {
    this.fixedDatumID = value;
  }

  /**
   * Gets the value of the 'fixedDatumValue' field.
   */
  public java.lang.Long getFixedDatumValue() {
    return fixedDatumValue;
  }

  /**
   * Sets the value of the 'fixedDatumValue' field.
   * @param value the value to set.
   */
  public void setFixedDatumValue(java.lang.Long value) {
    this.fixedDatumValue = value;
  }

  /** Creates a new FixedDatum RecordBuilder */
  public static com.cohesionforce.dis.avro.FixedDatum.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.FixedDatum.Builder();
  }
  
  /** Creates a new FixedDatum RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.FixedDatum.Builder newBuilder(com.cohesionforce.dis.avro.FixedDatum.Builder other) {
    return new com.cohesionforce.dis.avro.FixedDatum.Builder(other);
  }
  
  /** Creates a new FixedDatum RecordBuilder by copying an existing FixedDatum instance */
  public static com.cohesionforce.dis.avro.FixedDatum.Builder newBuilder(com.cohesionforce.dis.avro.FixedDatum other) {
    return new com.cohesionforce.dis.avro.FixedDatum.Builder(other);
  }
  
  /**
   * RecordBuilder for FixedDatum instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FixedDatum>
    implements org.apache.avro.data.RecordBuilder<FixedDatum> {

    private long fixedDatumID;
    private long fixedDatumValue;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.FixedDatum.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.FixedDatum.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fixedDatumID)) {
        this.fixedDatumID = data().deepCopy(fields()[0].schema(), other.fixedDatumID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fixedDatumValue)) {
        this.fixedDatumValue = data().deepCopy(fields()[1].schema(), other.fixedDatumValue);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing FixedDatum instance */
    private Builder(com.cohesionforce.dis.avro.FixedDatum other) {
            super(com.cohesionforce.dis.avro.FixedDatum.SCHEMA$);
      if (isValidValue(fields()[0], other.fixedDatumID)) {
        this.fixedDatumID = data().deepCopy(fields()[0].schema(), other.fixedDatumID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fixedDatumValue)) {
        this.fixedDatumValue = data().deepCopy(fields()[1].schema(), other.fixedDatumValue);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'fixedDatumID' field */
    public java.lang.Long getFixedDatumID() {
      return fixedDatumID;
    }
    
    /** Sets the value of the 'fixedDatumID' field */
    public com.cohesionforce.dis.avro.FixedDatum.Builder setFixedDatumID(long value) {
      validate(fields()[0], value);
      this.fixedDatumID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'fixedDatumID' field has been set */
    public boolean hasFixedDatumID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'fixedDatumID' field */
    public com.cohesionforce.dis.avro.FixedDatum.Builder clearFixedDatumID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'fixedDatumValue' field */
    public java.lang.Long getFixedDatumValue() {
      return fixedDatumValue;
    }
    
    /** Sets the value of the 'fixedDatumValue' field */
    public com.cohesionforce.dis.avro.FixedDatum.Builder setFixedDatumValue(long value) {
      validate(fields()[1], value);
      this.fixedDatumValue = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'fixedDatumValue' field has been set */
    public boolean hasFixedDatumValue() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'fixedDatumValue' field */
    public com.cohesionforce.dis.avro.FixedDatum.Builder clearFixedDatumValue() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public FixedDatum build() {
      try {
        FixedDatum record = new FixedDatum();
        record.fixedDatumID = fieldSetFlags()[0] ? this.fixedDatumID : (java.lang.Long) defaultValue(fields()[0]);
        record.fixedDatumValue = fieldSetFlags()[1] ? this.fixedDatumValue : (java.lang.Long) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
