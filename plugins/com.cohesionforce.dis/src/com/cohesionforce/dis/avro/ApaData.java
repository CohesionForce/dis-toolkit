/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ApaData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ApaData\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"parameterIndex\",\"type\":\"int\"},{\"name\":\"parameterValue\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int parameterIndex;
  @Deprecated public int parameterValue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ApaData() {}

  /**
   * All-args constructor.
   */
  public ApaData(java.lang.Integer parameterIndex, java.lang.Integer parameterValue) {
    this.parameterIndex = parameterIndex;
    this.parameterValue = parameterValue;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return parameterIndex;
    case 1: return parameterValue;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: parameterIndex = (java.lang.Integer)value$; break;
    case 1: parameterValue = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'parameterIndex' field.
   */
  public java.lang.Integer getParameterIndex() {
    return parameterIndex;
  }

  /**
   * Sets the value of the 'parameterIndex' field.
   * @param value the value to set.
   */
  public void setParameterIndex(java.lang.Integer value) {
    this.parameterIndex = value;
  }

  /**
   * Gets the value of the 'parameterValue' field.
   */
  public java.lang.Integer getParameterValue() {
    return parameterValue;
  }

  /**
   * Sets the value of the 'parameterValue' field.
   * @param value the value to set.
   */
  public void setParameterValue(java.lang.Integer value) {
    this.parameterValue = value;
  }

  /** Creates a new ApaData RecordBuilder */
  public static com.cohesionforce.dis.avro.ApaData.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.ApaData.Builder();
  }
  
  /** Creates a new ApaData RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.ApaData.Builder newBuilder(com.cohesionforce.dis.avro.ApaData.Builder other) {
    return new com.cohesionforce.dis.avro.ApaData.Builder(other);
  }
  
  /** Creates a new ApaData RecordBuilder by copying an existing ApaData instance */
  public static com.cohesionforce.dis.avro.ApaData.Builder newBuilder(com.cohesionforce.dis.avro.ApaData other) {
    return new com.cohesionforce.dis.avro.ApaData.Builder(other);
  }
  
  /**
   * RecordBuilder for ApaData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ApaData>
    implements org.apache.avro.data.RecordBuilder<ApaData> {

    private int parameterIndex;
    private int parameterValue;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.ApaData.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.ApaData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.parameterIndex)) {
        this.parameterIndex = data().deepCopy(fields()[0].schema(), other.parameterIndex);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.parameterValue)) {
        this.parameterValue = data().deepCopy(fields()[1].schema(), other.parameterValue);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ApaData instance */
    private Builder(com.cohesionforce.dis.avro.ApaData other) {
            super(com.cohesionforce.dis.avro.ApaData.SCHEMA$);
      if (isValidValue(fields()[0], other.parameterIndex)) {
        this.parameterIndex = data().deepCopy(fields()[0].schema(), other.parameterIndex);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.parameterValue)) {
        this.parameterValue = data().deepCopy(fields()[1].schema(), other.parameterValue);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'parameterIndex' field */
    public java.lang.Integer getParameterIndex() {
      return parameterIndex;
    }
    
    /** Sets the value of the 'parameterIndex' field */
    public com.cohesionforce.dis.avro.ApaData.Builder setParameterIndex(int value) {
      validate(fields()[0], value);
      this.parameterIndex = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'parameterIndex' field has been set */
    public boolean hasParameterIndex() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'parameterIndex' field */
    public com.cohesionforce.dis.avro.ApaData.Builder clearParameterIndex() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'parameterValue' field */
    public java.lang.Integer getParameterValue() {
      return parameterValue;
    }
    
    /** Sets the value of the 'parameterValue' field */
    public com.cohesionforce.dis.avro.ApaData.Builder setParameterValue(int value) {
      validate(fields()[1], value);
      this.parameterValue = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'parameterValue' field has been set */
    public boolean hasParameterValue() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'parameterValue' field */
    public com.cohesionforce.dis.avro.ApaData.Builder clearParameterValue() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public ApaData build() {
      try {
        ApaData record = new ApaData();
        record.parameterIndex = fieldSetFlags()[0] ? this.parameterIndex : (java.lang.Integer) defaultValue(fields()[0]);
        record.parameterValue = fieldSetFlags()[1] ? this.parameterValue : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
