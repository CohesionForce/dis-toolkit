/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Time_t extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Time_t\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"sec\",\"type\":\"int\"},{\"name\":\"nanosec\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int sec;
  @Deprecated public int nanosec;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Time_t() {}

  /**
   * All-args constructor.
   */
  public Time_t(java.lang.Integer sec, java.lang.Integer nanosec) {
    this.sec = sec;
    this.nanosec = nanosec;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sec;
    case 1: return nanosec;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sec = (java.lang.Integer)value$; break;
    case 1: nanosec = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sec' field.
   */
  public java.lang.Integer getSec() {
    return sec;
  }

  /**
   * Sets the value of the 'sec' field.
   * @param value the value to set.
   */
  public void setSec(java.lang.Integer value) {
    this.sec = value;
  }

  /**
   * Gets the value of the 'nanosec' field.
   */
  public java.lang.Integer getNanosec() {
    return nanosec;
  }

  /**
   * Sets the value of the 'nanosec' field.
   * @param value the value to set.
   */
  public void setNanosec(java.lang.Integer value) {
    this.nanosec = value;
  }

  /** Creates a new Time_t RecordBuilder */
  public static com.cohesionforce.dis.avro.Time_t.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.Time_t.Builder();
  }
  
  /** Creates a new Time_t RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.Time_t.Builder newBuilder(com.cohesionforce.dis.avro.Time_t.Builder other) {
    return new com.cohesionforce.dis.avro.Time_t.Builder(other);
  }
  
  /** Creates a new Time_t RecordBuilder by copying an existing Time_t instance */
  public static com.cohesionforce.dis.avro.Time_t.Builder newBuilder(com.cohesionforce.dis.avro.Time_t other) {
    return new com.cohesionforce.dis.avro.Time_t.Builder(other);
  }
  
  /**
   * RecordBuilder for Time_t instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Time_t>
    implements org.apache.avro.data.RecordBuilder<Time_t> {

    private int sec;
    private int nanosec;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.Time_t.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.Time_t.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sec)) {
        this.sec = data().deepCopy(fields()[0].schema(), other.sec);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nanosec)) {
        this.nanosec = data().deepCopy(fields()[1].schema(), other.nanosec);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Time_t instance */
    private Builder(com.cohesionforce.dis.avro.Time_t other) {
            super(com.cohesionforce.dis.avro.Time_t.SCHEMA$);
      if (isValidValue(fields()[0], other.sec)) {
        this.sec = data().deepCopy(fields()[0].schema(), other.sec);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nanosec)) {
        this.nanosec = data().deepCopy(fields()[1].schema(), other.nanosec);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'sec' field */
    public java.lang.Integer getSec() {
      return sec;
    }
    
    /** Sets the value of the 'sec' field */
    public com.cohesionforce.dis.avro.Time_t.Builder setSec(int value) {
      validate(fields()[0], value);
      this.sec = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'sec' field has been set */
    public boolean hasSec() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'sec' field */
    public com.cohesionforce.dis.avro.Time_t.Builder clearSec() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'nanosec' field */
    public java.lang.Integer getNanosec() {
      return nanosec;
    }
    
    /** Sets the value of the 'nanosec' field */
    public com.cohesionforce.dis.avro.Time_t.Builder setNanosec(int value) {
      validate(fields()[1], value);
      this.nanosec = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'nanosec' field has been set */
    public boolean hasNanosec() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'nanosec' field */
    public com.cohesionforce.dis.avro.Time_t.Builder clearNanosec() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Time_t build() {
      try {
        Time_t record = new Time_t();
        record.sec = fieldSetFlags()[0] ? this.sec : (java.lang.Integer) defaultValue(fields()[0]);
        record.nanosec = fieldSetFlags()[1] ? this.nanosec : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
