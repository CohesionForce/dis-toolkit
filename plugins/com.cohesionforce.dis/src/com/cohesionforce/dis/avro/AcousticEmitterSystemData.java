/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AcousticEmitterSystemData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AcousticEmitterSystemData\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"emitterSystemDataLength\",\"type\":\"int\"},{\"name\":\"numberOfBeamRecords\",\"type\":\"int\"},{\"name\":\"pad2\",\"type\":\"int\"},{\"name\":\"acousticEmitterSystem\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AcousticEmitterSystem\",\"fields\":[{\"name\":\"acousticName\",\"type\":\"int\"},{\"name\":\"acousticFunction\",\"type\":\"int\"},{\"name\":\"acousticID\",\"type\":\"int\"}]}]},{\"name\":\"emitterLocation\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Vector3Float\",\"fields\":[{\"name\":\"x\",\"type\":\"float\"},{\"name\":\"y\",\"type\":\"float\"},{\"name\":\"z\",\"type\":\"float\"}]}]},{\"name\":\"beamRecords\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AcousticBeamData\",\"fields\":[{\"name\":\"beamDataLength\",\"type\":\"int\"},{\"name\":\"beamIDNumber\",\"type\":\"int\"},{\"name\":\"pad2\",\"type\":\"int\"},{\"name\":\"fundamentalDataParameters\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AcousticBeamFundamentalParameter\",\"fields\":[{\"name\":\"activeEmissionParameterIndex\",\"type\":\"int\"},{\"name\":\"scanPattern\",\"type\":\"int\"},{\"name\":\"beamCenterAzimuth\",\"type\":\"float\"},{\"name\":\"azimuthalBeamwidth\",\"type\":\"float\"},{\"name\":\"beamCenterDE\",\"type\":\"float\"},{\"name\":\"deBeamwidth\",\"type\":\"float\"}]}]}]}}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int emitterSystemDataLength;
  @Deprecated public int numberOfBeamRecords;
  @Deprecated public int pad2;
  @Deprecated public com.cohesionforce.dis.avro.AcousticEmitterSystem acousticEmitterSystem;
  @Deprecated public com.cohesionforce.dis.avro.Vector3Float emitterLocation;
  @Deprecated public java.util.List<com.cohesionforce.dis.avro.AcousticBeamData> beamRecords;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AcousticEmitterSystemData() {}

  /**
   * All-args constructor.
   */
  public AcousticEmitterSystemData(java.lang.Integer emitterSystemDataLength, java.lang.Integer numberOfBeamRecords, java.lang.Integer pad2, com.cohesionforce.dis.avro.AcousticEmitterSystem acousticEmitterSystem, com.cohesionforce.dis.avro.Vector3Float emitterLocation, java.util.List<com.cohesionforce.dis.avro.AcousticBeamData> beamRecords) {
    this.emitterSystemDataLength = emitterSystemDataLength;
    this.numberOfBeamRecords = numberOfBeamRecords;
    this.pad2 = pad2;
    this.acousticEmitterSystem = acousticEmitterSystem;
    this.emitterLocation = emitterLocation;
    this.beamRecords = beamRecords;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return emitterSystemDataLength;
    case 1: return numberOfBeamRecords;
    case 2: return pad2;
    case 3: return acousticEmitterSystem;
    case 4: return emitterLocation;
    case 5: return beamRecords;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: emitterSystemDataLength = (java.lang.Integer)value$; break;
    case 1: numberOfBeamRecords = (java.lang.Integer)value$; break;
    case 2: pad2 = (java.lang.Integer)value$; break;
    case 3: acousticEmitterSystem = (com.cohesionforce.dis.avro.AcousticEmitterSystem)value$; break;
    case 4: emitterLocation = (com.cohesionforce.dis.avro.Vector3Float)value$; break;
    case 5: beamRecords = (java.util.List<com.cohesionforce.dis.avro.AcousticBeamData>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'emitterSystemDataLength' field.
   */
  public java.lang.Integer getEmitterSystemDataLength() {
    return emitterSystemDataLength;
  }

  /**
   * Sets the value of the 'emitterSystemDataLength' field.
   * @param value the value to set.
   */
  public void setEmitterSystemDataLength(java.lang.Integer value) {
    this.emitterSystemDataLength = value;
  }

  /**
   * Gets the value of the 'numberOfBeamRecords' field.
   */
  public java.lang.Integer getNumberOfBeamRecords() {
    return numberOfBeamRecords;
  }

  /**
   * Sets the value of the 'numberOfBeamRecords' field.
   * @param value the value to set.
   */
  public void setNumberOfBeamRecords(java.lang.Integer value) {
    this.numberOfBeamRecords = value;
  }

  /**
   * Gets the value of the 'pad2' field.
   */
  public java.lang.Integer getPad2() {
    return pad2;
  }

  /**
   * Sets the value of the 'pad2' field.
   * @param value the value to set.
   */
  public void setPad2(java.lang.Integer value) {
    this.pad2 = value;
  }

  /**
   * Gets the value of the 'acousticEmitterSystem' field.
   */
  public com.cohesionforce.dis.avro.AcousticEmitterSystem getAcousticEmitterSystem() {
    return acousticEmitterSystem;
  }

  /**
   * Sets the value of the 'acousticEmitterSystem' field.
   * @param value the value to set.
   */
  public void setAcousticEmitterSystem(com.cohesionforce.dis.avro.AcousticEmitterSystem value) {
    this.acousticEmitterSystem = value;
  }

  /**
   * Gets the value of the 'emitterLocation' field.
   */
  public com.cohesionforce.dis.avro.Vector3Float getEmitterLocation() {
    return emitterLocation;
  }

  /**
   * Sets the value of the 'emitterLocation' field.
   * @param value the value to set.
   */
  public void setEmitterLocation(com.cohesionforce.dis.avro.Vector3Float value) {
    this.emitterLocation = value;
  }

  /**
   * Gets the value of the 'beamRecords' field.
   */
  public java.util.List<com.cohesionforce.dis.avro.AcousticBeamData> getBeamRecords() {
    return beamRecords;
  }

  /**
   * Sets the value of the 'beamRecords' field.
   * @param value the value to set.
   */
  public void setBeamRecords(java.util.List<com.cohesionforce.dis.avro.AcousticBeamData> value) {
    this.beamRecords = value;
  }

  /** Creates a new AcousticEmitterSystemData RecordBuilder */
  public static com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder();
  }
  
  /** Creates a new AcousticEmitterSystemData RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder newBuilder(com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder other) {
    return new com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder(other);
  }
  
  /** Creates a new AcousticEmitterSystemData RecordBuilder by copying an existing AcousticEmitterSystemData instance */
  public static com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder newBuilder(com.cohesionforce.dis.avro.AcousticEmitterSystemData other) {
    return new com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder(other);
  }
  
  /**
   * RecordBuilder for AcousticEmitterSystemData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AcousticEmitterSystemData>
    implements org.apache.avro.data.RecordBuilder<AcousticEmitterSystemData> {

    private int emitterSystemDataLength;
    private int numberOfBeamRecords;
    private int pad2;
    private com.cohesionforce.dis.avro.AcousticEmitterSystem acousticEmitterSystem;
    private com.cohesionforce.dis.avro.Vector3Float emitterLocation;
    private java.util.List<com.cohesionforce.dis.avro.AcousticBeamData> beamRecords;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.AcousticEmitterSystemData.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.emitterSystemDataLength)) {
        this.emitterSystemDataLength = data().deepCopy(fields()[0].schema(), other.emitterSystemDataLength);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.numberOfBeamRecords)) {
        this.numberOfBeamRecords = data().deepCopy(fields()[1].schema(), other.numberOfBeamRecords);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pad2)) {
        this.pad2 = data().deepCopy(fields()[2].schema(), other.pad2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.acousticEmitterSystem)) {
        this.acousticEmitterSystem = data().deepCopy(fields()[3].schema(), other.acousticEmitterSystem);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.emitterLocation)) {
        this.emitterLocation = data().deepCopy(fields()[4].schema(), other.emitterLocation);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.beamRecords)) {
        this.beamRecords = data().deepCopy(fields()[5].schema(), other.beamRecords);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AcousticEmitterSystemData instance */
    private Builder(com.cohesionforce.dis.avro.AcousticEmitterSystemData other) {
            super(com.cohesionforce.dis.avro.AcousticEmitterSystemData.SCHEMA$);
      if (isValidValue(fields()[0], other.emitterSystemDataLength)) {
        this.emitterSystemDataLength = data().deepCopy(fields()[0].schema(), other.emitterSystemDataLength);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.numberOfBeamRecords)) {
        this.numberOfBeamRecords = data().deepCopy(fields()[1].schema(), other.numberOfBeamRecords);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pad2)) {
        this.pad2 = data().deepCopy(fields()[2].schema(), other.pad2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.acousticEmitterSystem)) {
        this.acousticEmitterSystem = data().deepCopy(fields()[3].schema(), other.acousticEmitterSystem);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.emitterLocation)) {
        this.emitterLocation = data().deepCopy(fields()[4].schema(), other.emitterLocation);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.beamRecords)) {
        this.beamRecords = data().deepCopy(fields()[5].schema(), other.beamRecords);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'emitterSystemDataLength' field */
    public java.lang.Integer getEmitterSystemDataLength() {
      return emitterSystemDataLength;
    }
    
    /** Sets the value of the 'emitterSystemDataLength' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder setEmitterSystemDataLength(int value) {
      validate(fields()[0], value);
      this.emitterSystemDataLength = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'emitterSystemDataLength' field has been set */
    public boolean hasEmitterSystemDataLength() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'emitterSystemDataLength' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder clearEmitterSystemDataLength() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'numberOfBeamRecords' field */
    public java.lang.Integer getNumberOfBeamRecords() {
      return numberOfBeamRecords;
    }
    
    /** Sets the value of the 'numberOfBeamRecords' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder setNumberOfBeamRecords(int value) {
      validate(fields()[1], value);
      this.numberOfBeamRecords = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'numberOfBeamRecords' field has been set */
    public boolean hasNumberOfBeamRecords() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'numberOfBeamRecords' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder clearNumberOfBeamRecords() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'pad2' field */
    public java.lang.Integer getPad2() {
      return pad2;
    }
    
    /** Sets the value of the 'pad2' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder setPad2(int value) {
      validate(fields()[2], value);
      this.pad2 = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'pad2' field has been set */
    public boolean hasPad2() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'pad2' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder clearPad2() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'acousticEmitterSystem' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystem getAcousticEmitterSystem() {
      return acousticEmitterSystem;
    }
    
    /** Sets the value of the 'acousticEmitterSystem' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder setAcousticEmitterSystem(com.cohesionforce.dis.avro.AcousticEmitterSystem value) {
      validate(fields()[3], value);
      this.acousticEmitterSystem = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'acousticEmitterSystem' field has been set */
    public boolean hasAcousticEmitterSystem() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'acousticEmitterSystem' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder clearAcousticEmitterSystem() {
      acousticEmitterSystem = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'emitterLocation' field */
    public com.cohesionforce.dis.avro.Vector3Float getEmitterLocation() {
      return emitterLocation;
    }
    
    /** Sets the value of the 'emitterLocation' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder setEmitterLocation(com.cohesionforce.dis.avro.Vector3Float value) {
      validate(fields()[4], value);
      this.emitterLocation = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'emitterLocation' field has been set */
    public boolean hasEmitterLocation() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'emitterLocation' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder clearEmitterLocation() {
      emitterLocation = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'beamRecords' field */
    public java.util.List<com.cohesionforce.dis.avro.AcousticBeamData> getBeamRecords() {
      return beamRecords;
    }
    
    /** Sets the value of the 'beamRecords' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder setBeamRecords(java.util.List<com.cohesionforce.dis.avro.AcousticBeamData> value) {
      validate(fields()[5], value);
      this.beamRecords = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'beamRecords' field has been set */
    public boolean hasBeamRecords() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'beamRecords' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystemData.Builder clearBeamRecords() {
      beamRecords = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public AcousticEmitterSystemData build() {
      try {
        AcousticEmitterSystemData record = new AcousticEmitterSystemData();
        record.emitterSystemDataLength = fieldSetFlags()[0] ? this.emitterSystemDataLength : (java.lang.Integer) defaultValue(fields()[0]);
        record.numberOfBeamRecords = fieldSetFlags()[1] ? this.numberOfBeamRecords : (java.lang.Integer) defaultValue(fields()[1]);
        record.pad2 = fieldSetFlags()[2] ? this.pad2 : (java.lang.Integer) defaultValue(fields()[2]);
        record.acousticEmitterSystem = fieldSetFlags()[3] ? this.acousticEmitterSystem : (com.cohesionforce.dis.avro.AcousticEmitterSystem) defaultValue(fields()[3]);
        record.emitterLocation = fieldSetFlags()[4] ? this.emitterLocation : (com.cohesionforce.dis.avro.Vector3Float) defaultValue(fields()[4]);
        record.beamRecords = fieldSetFlags()[5] ? this.beamRecords : (java.util.List<com.cohesionforce.dis.avro.AcousticBeamData>) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
