/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RecordSet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RecordSet\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"recordID\",\"type\":\"long\"},{\"name\":\"recordSetSerialNumber\",\"type\":\"long\"},{\"name\":\"recordLength\",\"type\":\"int\"},{\"name\":\"recordCount\",\"type\":\"int\"},{\"name\":\"recordValues\",\"type\":\"int\"},{\"name\":\"pad4\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long recordID;
  @Deprecated public long recordSetSerialNumber;
  @Deprecated public int recordLength;
  @Deprecated public int recordCount;
  @Deprecated public int recordValues;
  @Deprecated public int pad4;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public RecordSet() {}

  /**
   * All-args constructor.
   */
  public RecordSet(java.lang.Long recordID, java.lang.Long recordSetSerialNumber, java.lang.Integer recordLength, java.lang.Integer recordCount, java.lang.Integer recordValues, java.lang.Integer pad4) {
    this.recordID = recordID;
    this.recordSetSerialNumber = recordSetSerialNumber;
    this.recordLength = recordLength;
    this.recordCount = recordCount;
    this.recordValues = recordValues;
    this.pad4 = pad4;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return recordID;
    case 1: return recordSetSerialNumber;
    case 2: return recordLength;
    case 3: return recordCount;
    case 4: return recordValues;
    case 5: return pad4;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: recordID = (java.lang.Long)value$; break;
    case 1: recordSetSerialNumber = (java.lang.Long)value$; break;
    case 2: recordLength = (java.lang.Integer)value$; break;
    case 3: recordCount = (java.lang.Integer)value$; break;
    case 4: recordValues = (java.lang.Integer)value$; break;
    case 5: pad4 = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'recordID' field.
   */
  public java.lang.Long getRecordID() {
    return recordID;
  }

  /**
   * Sets the value of the 'recordID' field.
   * @param value the value to set.
   */
  public void setRecordID(java.lang.Long value) {
    this.recordID = value;
  }

  /**
   * Gets the value of the 'recordSetSerialNumber' field.
   */
  public java.lang.Long getRecordSetSerialNumber() {
    return recordSetSerialNumber;
  }

  /**
   * Sets the value of the 'recordSetSerialNumber' field.
   * @param value the value to set.
   */
  public void setRecordSetSerialNumber(java.lang.Long value) {
    this.recordSetSerialNumber = value;
  }

  /**
   * Gets the value of the 'recordLength' field.
   */
  public java.lang.Integer getRecordLength() {
    return recordLength;
  }

  /**
   * Sets the value of the 'recordLength' field.
   * @param value the value to set.
   */
  public void setRecordLength(java.lang.Integer value) {
    this.recordLength = value;
  }

  /**
   * Gets the value of the 'recordCount' field.
   */
  public java.lang.Integer getRecordCount() {
    return recordCount;
  }

  /**
   * Sets the value of the 'recordCount' field.
   * @param value the value to set.
   */
  public void setRecordCount(java.lang.Integer value) {
    this.recordCount = value;
  }

  /**
   * Gets the value of the 'recordValues' field.
   */
  public java.lang.Integer getRecordValues() {
    return recordValues;
  }

  /**
   * Sets the value of the 'recordValues' field.
   * @param value the value to set.
   */
  public void setRecordValues(java.lang.Integer value) {
    this.recordValues = value;
  }

  /**
   * Gets the value of the 'pad4' field.
   */
  public java.lang.Integer getPad4() {
    return pad4;
  }

  /**
   * Sets the value of the 'pad4' field.
   * @param value the value to set.
   */
  public void setPad4(java.lang.Integer value) {
    this.pad4 = value;
  }

  /** Creates a new RecordSet RecordBuilder */
  public static com.cohesionforce.dis.avro.RecordSet.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.RecordSet.Builder();
  }
  
  /** Creates a new RecordSet RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.RecordSet.Builder newBuilder(com.cohesionforce.dis.avro.RecordSet.Builder other) {
    return new com.cohesionforce.dis.avro.RecordSet.Builder(other);
  }
  
  /** Creates a new RecordSet RecordBuilder by copying an existing RecordSet instance */
  public static com.cohesionforce.dis.avro.RecordSet.Builder newBuilder(com.cohesionforce.dis.avro.RecordSet other) {
    return new com.cohesionforce.dis.avro.RecordSet.Builder(other);
  }
  
  /**
   * RecordBuilder for RecordSet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RecordSet>
    implements org.apache.avro.data.RecordBuilder<RecordSet> {

    private long recordID;
    private long recordSetSerialNumber;
    private int recordLength;
    private int recordCount;
    private int recordValues;
    private int pad4;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.RecordSet.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.RecordSet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.recordID)) {
        this.recordID = data().deepCopy(fields()[0].schema(), other.recordID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.recordSetSerialNumber)) {
        this.recordSetSerialNumber = data().deepCopy(fields()[1].schema(), other.recordSetSerialNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.recordLength)) {
        this.recordLength = data().deepCopy(fields()[2].schema(), other.recordLength);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.recordCount)) {
        this.recordCount = data().deepCopy(fields()[3].schema(), other.recordCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.recordValues)) {
        this.recordValues = data().deepCopy(fields()[4].schema(), other.recordValues);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.pad4)) {
        this.pad4 = data().deepCopy(fields()[5].schema(), other.pad4);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing RecordSet instance */
    private Builder(com.cohesionforce.dis.avro.RecordSet other) {
            super(com.cohesionforce.dis.avro.RecordSet.SCHEMA$);
      if (isValidValue(fields()[0], other.recordID)) {
        this.recordID = data().deepCopy(fields()[0].schema(), other.recordID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.recordSetSerialNumber)) {
        this.recordSetSerialNumber = data().deepCopy(fields()[1].schema(), other.recordSetSerialNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.recordLength)) {
        this.recordLength = data().deepCopy(fields()[2].schema(), other.recordLength);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.recordCount)) {
        this.recordCount = data().deepCopy(fields()[3].schema(), other.recordCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.recordValues)) {
        this.recordValues = data().deepCopy(fields()[4].schema(), other.recordValues);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.pad4)) {
        this.pad4 = data().deepCopy(fields()[5].schema(), other.pad4);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'recordID' field */
    public java.lang.Long getRecordID() {
      return recordID;
    }
    
    /** Sets the value of the 'recordID' field */
    public com.cohesionforce.dis.avro.RecordSet.Builder setRecordID(long value) {
      validate(fields()[0], value);
      this.recordID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'recordID' field has been set */
    public boolean hasRecordID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'recordID' field */
    public com.cohesionforce.dis.avro.RecordSet.Builder clearRecordID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'recordSetSerialNumber' field */
    public java.lang.Long getRecordSetSerialNumber() {
      return recordSetSerialNumber;
    }
    
    /** Sets the value of the 'recordSetSerialNumber' field */
    public com.cohesionforce.dis.avro.RecordSet.Builder setRecordSetSerialNumber(long value) {
      validate(fields()[1], value);
      this.recordSetSerialNumber = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'recordSetSerialNumber' field has been set */
    public boolean hasRecordSetSerialNumber() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'recordSetSerialNumber' field */
    public com.cohesionforce.dis.avro.RecordSet.Builder clearRecordSetSerialNumber() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'recordLength' field */
    public java.lang.Integer getRecordLength() {
      return recordLength;
    }
    
    /** Sets the value of the 'recordLength' field */
    public com.cohesionforce.dis.avro.RecordSet.Builder setRecordLength(int value) {
      validate(fields()[2], value);
      this.recordLength = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'recordLength' field has been set */
    public boolean hasRecordLength() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'recordLength' field */
    public com.cohesionforce.dis.avro.RecordSet.Builder clearRecordLength() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'recordCount' field */
    public java.lang.Integer getRecordCount() {
      return recordCount;
    }
    
    /** Sets the value of the 'recordCount' field */
    public com.cohesionforce.dis.avro.RecordSet.Builder setRecordCount(int value) {
      validate(fields()[3], value);
      this.recordCount = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'recordCount' field has been set */
    public boolean hasRecordCount() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'recordCount' field */
    public com.cohesionforce.dis.avro.RecordSet.Builder clearRecordCount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'recordValues' field */
    public java.lang.Integer getRecordValues() {
      return recordValues;
    }
    
    /** Sets the value of the 'recordValues' field */
    public com.cohesionforce.dis.avro.RecordSet.Builder setRecordValues(int value) {
      validate(fields()[4], value);
      this.recordValues = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'recordValues' field has been set */
    public boolean hasRecordValues() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'recordValues' field */
    public com.cohesionforce.dis.avro.RecordSet.Builder clearRecordValues() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'pad4' field */
    public java.lang.Integer getPad4() {
      return pad4;
    }
    
    /** Sets the value of the 'pad4' field */
    public com.cohesionforce.dis.avro.RecordSet.Builder setPad4(int value) {
      validate(fields()[5], value);
      this.pad4 = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'pad4' field has been set */
    public boolean hasPad4() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'pad4' field */
    public com.cohesionforce.dis.avro.RecordSet.Builder clearPad4() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public RecordSet build() {
      try {
        RecordSet record = new RecordSet();
        record.recordID = fieldSetFlags()[0] ? this.recordID : (java.lang.Long) defaultValue(fields()[0]);
        record.recordSetSerialNumber = fieldSetFlags()[1] ? this.recordSetSerialNumber : (java.lang.Long) defaultValue(fields()[1]);
        record.recordLength = fieldSetFlags()[2] ? this.recordLength : (java.lang.Integer) defaultValue(fields()[2]);
        record.recordCount = fieldSetFlags()[3] ? this.recordCount : (java.lang.Integer) defaultValue(fields()[3]);
        record.recordValues = fieldSetFlags()[4] ? this.recordValues : (java.lang.Integer) defaultValue(fields()[4]);
        record.pad4 = fieldSetFlags()[5] ? this.pad4 : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
