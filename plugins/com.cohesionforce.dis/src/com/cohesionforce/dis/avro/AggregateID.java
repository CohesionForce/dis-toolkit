/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AggregateID extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AggregateID\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"site\",\"type\":\"int\"},{\"name\":\"application\",\"type\":\"int\"},{\"name\":\"aggregateID\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int site;
  @Deprecated public int application;
  @Deprecated public int aggregateID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AggregateID() {}

  /**
   * All-args constructor.
   */
  public AggregateID(java.lang.Integer site, java.lang.Integer application, java.lang.Integer aggregateID) {
    this.site = site;
    this.application = application;
    this.aggregateID = aggregateID;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return site;
    case 1: return application;
    case 2: return aggregateID;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: site = (java.lang.Integer)value$; break;
    case 1: application = (java.lang.Integer)value$; break;
    case 2: aggregateID = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'site' field.
   */
  public java.lang.Integer getSite() {
    return site;
  }

  /**
   * Sets the value of the 'site' field.
   * @param value the value to set.
   */
  public void setSite(java.lang.Integer value) {
    this.site = value;
  }

  /**
   * Gets the value of the 'application' field.
   */
  public java.lang.Integer getApplication() {
    return application;
  }

  /**
   * Sets the value of the 'application' field.
   * @param value the value to set.
   */
  public void setApplication(java.lang.Integer value) {
    this.application = value;
  }

  /**
   * Gets the value of the 'aggregateID' field.
   */
  public java.lang.Integer getAggregateID() {
    return aggregateID;
  }

  /**
   * Sets the value of the 'aggregateID' field.
   * @param value the value to set.
   */
  public void setAggregateID(java.lang.Integer value) {
    this.aggregateID = value;
  }

  /** Creates a new AggregateID RecordBuilder */
  public static com.cohesionforce.dis.avro.AggregateID.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.AggregateID.Builder();
  }
  
  /** Creates a new AggregateID RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.AggregateID.Builder newBuilder(com.cohesionforce.dis.avro.AggregateID.Builder other) {
    return new com.cohesionforce.dis.avro.AggregateID.Builder(other);
  }
  
  /** Creates a new AggregateID RecordBuilder by copying an existing AggregateID instance */
  public static com.cohesionforce.dis.avro.AggregateID.Builder newBuilder(com.cohesionforce.dis.avro.AggregateID other) {
    return new com.cohesionforce.dis.avro.AggregateID.Builder(other);
  }
  
  /**
   * RecordBuilder for AggregateID instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AggregateID>
    implements org.apache.avro.data.RecordBuilder<AggregateID> {

    private int site;
    private int application;
    private int aggregateID;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.AggregateID.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.AggregateID.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.site)) {
        this.site = data().deepCopy(fields()[0].schema(), other.site);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.application)) {
        this.application = data().deepCopy(fields()[1].schema(), other.application);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.aggregateID)) {
        this.aggregateID = data().deepCopy(fields()[2].schema(), other.aggregateID);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AggregateID instance */
    private Builder(com.cohesionforce.dis.avro.AggregateID other) {
            super(com.cohesionforce.dis.avro.AggregateID.SCHEMA$);
      if (isValidValue(fields()[0], other.site)) {
        this.site = data().deepCopy(fields()[0].schema(), other.site);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.application)) {
        this.application = data().deepCopy(fields()[1].schema(), other.application);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.aggregateID)) {
        this.aggregateID = data().deepCopy(fields()[2].schema(), other.aggregateID);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'site' field */
    public java.lang.Integer getSite() {
      return site;
    }
    
    /** Sets the value of the 'site' field */
    public com.cohesionforce.dis.avro.AggregateID.Builder setSite(int value) {
      validate(fields()[0], value);
      this.site = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'site' field has been set */
    public boolean hasSite() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'site' field */
    public com.cohesionforce.dis.avro.AggregateID.Builder clearSite() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'application' field */
    public java.lang.Integer getApplication() {
      return application;
    }
    
    /** Sets the value of the 'application' field */
    public com.cohesionforce.dis.avro.AggregateID.Builder setApplication(int value) {
      validate(fields()[1], value);
      this.application = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'application' field has been set */
    public boolean hasApplication() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'application' field */
    public com.cohesionforce.dis.avro.AggregateID.Builder clearApplication() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'aggregateID' field */
    public java.lang.Integer getAggregateID() {
      return aggregateID;
    }
    
    /** Sets the value of the 'aggregateID' field */
    public com.cohesionforce.dis.avro.AggregateID.Builder setAggregateID(int value) {
      validate(fields()[2], value);
      this.aggregateID = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'aggregateID' field has been set */
    public boolean hasAggregateID() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'aggregateID' field */
    public com.cohesionforce.dis.avro.AggregateID.Builder clearAggregateID() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public AggregateID build() {
      try {
        AggregateID record = new AggregateID();
        record.site = fieldSetFlags()[0] ? this.site : (java.lang.Integer) defaultValue(fields()[0]);
        record.application = fieldSetFlags()[1] ? this.application : (java.lang.Integer) defaultValue(fields()[1]);
        record.aggregateID = fieldSetFlags()[2] ? this.aggregateID : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
