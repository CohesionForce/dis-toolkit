/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Orientation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Orientation\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"psi\",\"type\":\"float\"},{\"name\":\"theta\",\"type\":\"float\"},{\"name\":\"phi\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public float psi;
  @Deprecated public float theta;
  @Deprecated public float phi;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Orientation() {}

  /**
   * All-args constructor.
   */
  public Orientation(java.lang.Float psi, java.lang.Float theta, java.lang.Float phi) {
    this.psi = psi;
    this.theta = theta;
    this.phi = phi;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return psi;
    case 1: return theta;
    case 2: return phi;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: psi = (java.lang.Float)value$; break;
    case 1: theta = (java.lang.Float)value$; break;
    case 2: phi = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'psi' field.
   */
  public java.lang.Float getPsi() {
    return psi;
  }

  /**
   * Sets the value of the 'psi' field.
   * @param value the value to set.
   */
  public void setPsi(java.lang.Float value) {
    this.psi = value;
  }

  /**
   * Gets the value of the 'theta' field.
   */
  public java.lang.Float getTheta() {
    return theta;
  }

  /**
   * Sets the value of the 'theta' field.
   * @param value the value to set.
   */
  public void setTheta(java.lang.Float value) {
    this.theta = value;
  }

  /**
   * Gets the value of the 'phi' field.
   */
  public java.lang.Float getPhi() {
    return phi;
  }

  /**
   * Sets the value of the 'phi' field.
   * @param value the value to set.
   */
  public void setPhi(java.lang.Float value) {
    this.phi = value;
  }

  /** Creates a new Orientation RecordBuilder */
  public static com.cohesionforce.dis.avro.Orientation.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.Orientation.Builder();
  }
  
  /** Creates a new Orientation RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.Orientation.Builder newBuilder(com.cohesionforce.dis.avro.Orientation.Builder other) {
    return new com.cohesionforce.dis.avro.Orientation.Builder(other);
  }
  
  /** Creates a new Orientation RecordBuilder by copying an existing Orientation instance */
  public static com.cohesionforce.dis.avro.Orientation.Builder newBuilder(com.cohesionforce.dis.avro.Orientation other) {
    return new com.cohesionforce.dis.avro.Orientation.Builder(other);
  }
  
  /**
   * RecordBuilder for Orientation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Orientation>
    implements org.apache.avro.data.RecordBuilder<Orientation> {

    private float psi;
    private float theta;
    private float phi;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.Orientation.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.Orientation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.psi)) {
        this.psi = data().deepCopy(fields()[0].schema(), other.psi);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.theta)) {
        this.theta = data().deepCopy(fields()[1].schema(), other.theta);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phi)) {
        this.phi = data().deepCopy(fields()[2].schema(), other.phi);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Orientation instance */
    private Builder(com.cohesionforce.dis.avro.Orientation other) {
            super(com.cohesionforce.dis.avro.Orientation.SCHEMA$);
      if (isValidValue(fields()[0], other.psi)) {
        this.psi = data().deepCopy(fields()[0].schema(), other.psi);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.theta)) {
        this.theta = data().deepCopy(fields()[1].schema(), other.theta);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phi)) {
        this.phi = data().deepCopy(fields()[2].schema(), other.phi);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'psi' field */
    public java.lang.Float getPsi() {
      return psi;
    }
    
    /** Sets the value of the 'psi' field */
    public com.cohesionforce.dis.avro.Orientation.Builder setPsi(float value) {
      validate(fields()[0], value);
      this.psi = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'psi' field has been set */
    public boolean hasPsi() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'psi' field */
    public com.cohesionforce.dis.avro.Orientation.Builder clearPsi() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'theta' field */
    public java.lang.Float getTheta() {
      return theta;
    }
    
    /** Sets the value of the 'theta' field */
    public com.cohesionforce.dis.avro.Orientation.Builder setTheta(float value) {
      validate(fields()[1], value);
      this.theta = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'theta' field has been set */
    public boolean hasTheta() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'theta' field */
    public com.cohesionforce.dis.avro.Orientation.Builder clearTheta() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'phi' field */
    public java.lang.Float getPhi() {
      return phi;
    }
    
    /** Sets the value of the 'phi' field */
    public com.cohesionforce.dis.avro.Orientation.Builder setPhi(float value) {
      validate(fields()[2], value);
      this.phi = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'phi' field has been set */
    public boolean hasPhi() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'phi' field */
    public com.cohesionforce.dis.avro.Orientation.Builder clearPhi() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Orientation build() {
      try {
        Orientation record = new Orientation();
        record.psi = fieldSetFlags()[0] ? this.psi : (java.lang.Float) defaultValue(fields()[0]);
        record.theta = fieldSetFlags()[1] ? this.theta : (java.lang.Float) defaultValue(fields()[1]);
        record.phi = fieldSetFlags()[2] ? this.phi : (java.lang.Float) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
