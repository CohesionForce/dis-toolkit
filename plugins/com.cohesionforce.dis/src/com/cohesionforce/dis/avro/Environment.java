/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Environment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Environment\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"environmentType\",\"type\":\"long\"},{\"name\":\"length\",\"type\":\"int\"},{\"name\":\"recordIndex\",\"type\":\"int\"},{\"name\":\"padding1\",\"type\":\"int\"},{\"name\":\"geometry\",\"type\":\"int\"},{\"name\":\"padding2\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long environmentType;
  @Deprecated public int length;
  @Deprecated public int recordIndex;
  @Deprecated public int padding1;
  @Deprecated public int geometry;
  @Deprecated public int padding2;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Environment() {}

  /**
   * All-args constructor.
   */
  public Environment(java.lang.Long environmentType, java.lang.Integer length, java.lang.Integer recordIndex, java.lang.Integer padding1, java.lang.Integer geometry, java.lang.Integer padding2) {
    this.environmentType = environmentType;
    this.length = length;
    this.recordIndex = recordIndex;
    this.padding1 = padding1;
    this.geometry = geometry;
    this.padding2 = padding2;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return environmentType;
    case 1: return length;
    case 2: return recordIndex;
    case 3: return padding1;
    case 4: return geometry;
    case 5: return padding2;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: environmentType = (java.lang.Long)value$; break;
    case 1: length = (java.lang.Integer)value$; break;
    case 2: recordIndex = (java.lang.Integer)value$; break;
    case 3: padding1 = (java.lang.Integer)value$; break;
    case 4: geometry = (java.lang.Integer)value$; break;
    case 5: padding2 = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'environmentType' field.
   */
  public java.lang.Long getEnvironmentType() {
    return environmentType;
  }

  /**
   * Sets the value of the 'environmentType' field.
   * @param value the value to set.
   */
  public void setEnvironmentType(java.lang.Long value) {
    this.environmentType = value;
  }

  /**
   * Gets the value of the 'length' field.
   */
  public java.lang.Integer getLength() {
    return length;
  }

  /**
   * Sets the value of the 'length' field.
   * @param value the value to set.
   */
  public void setLength(java.lang.Integer value) {
    this.length = value;
  }

  /**
   * Gets the value of the 'recordIndex' field.
   */
  public java.lang.Integer getRecordIndex() {
    return recordIndex;
  }

  /**
   * Sets the value of the 'recordIndex' field.
   * @param value the value to set.
   */
  public void setRecordIndex(java.lang.Integer value) {
    this.recordIndex = value;
  }

  /**
   * Gets the value of the 'padding1' field.
   */
  public java.lang.Integer getPadding1() {
    return padding1;
  }

  /**
   * Sets the value of the 'padding1' field.
   * @param value the value to set.
   */
  public void setPadding1(java.lang.Integer value) {
    this.padding1 = value;
  }

  /**
   * Gets the value of the 'geometry' field.
   */
  public java.lang.Integer getGeometry() {
    return geometry;
  }

  /**
   * Sets the value of the 'geometry' field.
   * @param value the value to set.
   */
  public void setGeometry(java.lang.Integer value) {
    this.geometry = value;
  }

  /**
   * Gets the value of the 'padding2' field.
   */
  public java.lang.Integer getPadding2() {
    return padding2;
  }

  /**
   * Sets the value of the 'padding2' field.
   * @param value the value to set.
   */
  public void setPadding2(java.lang.Integer value) {
    this.padding2 = value;
  }

  /** Creates a new Environment RecordBuilder */
  public static com.cohesionforce.dis.avro.Environment.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.Environment.Builder();
  }
  
  /** Creates a new Environment RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.Environment.Builder newBuilder(com.cohesionforce.dis.avro.Environment.Builder other) {
    return new com.cohesionforce.dis.avro.Environment.Builder(other);
  }
  
  /** Creates a new Environment RecordBuilder by copying an existing Environment instance */
  public static com.cohesionforce.dis.avro.Environment.Builder newBuilder(com.cohesionforce.dis.avro.Environment other) {
    return new com.cohesionforce.dis.avro.Environment.Builder(other);
  }
  
  /**
   * RecordBuilder for Environment instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Environment>
    implements org.apache.avro.data.RecordBuilder<Environment> {

    private long environmentType;
    private int length;
    private int recordIndex;
    private int padding1;
    private int geometry;
    private int padding2;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.Environment.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.Environment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.environmentType)) {
        this.environmentType = data().deepCopy(fields()[0].schema(), other.environmentType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.length)) {
        this.length = data().deepCopy(fields()[1].schema(), other.length);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.recordIndex)) {
        this.recordIndex = data().deepCopy(fields()[2].schema(), other.recordIndex);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.padding1)) {
        this.padding1 = data().deepCopy(fields()[3].schema(), other.padding1);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.geometry)) {
        this.geometry = data().deepCopy(fields()[4].schema(), other.geometry);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.padding2)) {
        this.padding2 = data().deepCopy(fields()[5].schema(), other.padding2);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Environment instance */
    private Builder(com.cohesionforce.dis.avro.Environment other) {
            super(com.cohesionforce.dis.avro.Environment.SCHEMA$);
      if (isValidValue(fields()[0], other.environmentType)) {
        this.environmentType = data().deepCopy(fields()[0].schema(), other.environmentType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.length)) {
        this.length = data().deepCopy(fields()[1].schema(), other.length);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.recordIndex)) {
        this.recordIndex = data().deepCopy(fields()[2].schema(), other.recordIndex);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.padding1)) {
        this.padding1 = data().deepCopy(fields()[3].schema(), other.padding1);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.geometry)) {
        this.geometry = data().deepCopy(fields()[4].schema(), other.geometry);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.padding2)) {
        this.padding2 = data().deepCopy(fields()[5].schema(), other.padding2);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'environmentType' field */
    public java.lang.Long getEnvironmentType() {
      return environmentType;
    }
    
    /** Sets the value of the 'environmentType' field */
    public com.cohesionforce.dis.avro.Environment.Builder setEnvironmentType(long value) {
      validate(fields()[0], value);
      this.environmentType = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'environmentType' field has been set */
    public boolean hasEnvironmentType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'environmentType' field */
    public com.cohesionforce.dis.avro.Environment.Builder clearEnvironmentType() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'length' field */
    public java.lang.Integer getLength() {
      return length;
    }
    
    /** Sets the value of the 'length' field */
    public com.cohesionforce.dis.avro.Environment.Builder setLength(int value) {
      validate(fields()[1], value);
      this.length = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'length' field has been set */
    public boolean hasLength() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'length' field */
    public com.cohesionforce.dis.avro.Environment.Builder clearLength() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'recordIndex' field */
    public java.lang.Integer getRecordIndex() {
      return recordIndex;
    }
    
    /** Sets the value of the 'recordIndex' field */
    public com.cohesionforce.dis.avro.Environment.Builder setRecordIndex(int value) {
      validate(fields()[2], value);
      this.recordIndex = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'recordIndex' field has been set */
    public boolean hasRecordIndex() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'recordIndex' field */
    public com.cohesionforce.dis.avro.Environment.Builder clearRecordIndex() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'padding1' field */
    public java.lang.Integer getPadding1() {
      return padding1;
    }
    
    /** Sets the value of the 'padding1' field */
    public com.cohesionforce.dis.avro.Environment.Builder setPadding1(int value) {
      validate(fields()[3], value);
      this.padding1 = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'padding1' field has been set */
    public boolean hasPadding1() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'padding1' field */
    public com.cohesionforce.dis.avro.Environment.Builder clearPadding1() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'geometry' field */
    public java.lang.Integer getGeometry() {
      return geometry;
    }
    
    /** Sets the value of the 'geometry' field */
    public com.cohesionforce.dis.avro.Environment.Builder setGeometry(int value) {
      validate(fields()[4], value);
      this.geometry = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'geometry' field has been set */
    public boolean hasGeometry() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'geometry' field */
    public com.cohesionforce.dis.avro.Environment.Builder clearGeometry() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'padding2' field */
    public java.lang.Integer getPadding2() {
      return padding2;
    }
    
    /** Sets the value of the 'padding2' field */
    public com.cohesionforce.dis.avro.Environment.Builder setPadding2(int value) {
      validate(fields()[5], value);
      this.padding2 = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'padding2' field has been set */
    public boolean hasPadding2() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'padding2' field */
    public com.cohesionforce.dis.avro.Environment.Builder clearPadding2() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Environment build() {
      try {
        Environment record = new Environment();
        record.environmentType = fieldSetFlags()[0] ? this.environmentType : (java.lang.Long) defaultValue(fields()[0]);
        record.length = fieldSetFlags()[1] ? this.length : (java.lang.Integer) defaultValue(fields()[1]);
        record.recordIndex = fieldSetFlags()[2] ? this.recordIndex : (java.lang.Integer) defaultValue(fields()[2]);
        record.padding1 = fieldSetFlags()[3] ? this.padding1 : (java.lang.Integer) defaultValue(fields()[3]);
        record.geometry = fieldSetFlags()[4] ? this.geometry : (java.lang.Integer) defaultValue(fields()[4]);
        record.padding2 = fieldSetFlags()[5] ? this.padding2 : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
