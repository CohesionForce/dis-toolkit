/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AcousticEmitter extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AcousticEmitter\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"acousticName\",\"type\":\"int\"},{\"name\":\"function\",\"type\":\"int\"},{\"name\":\"acousticIdNumber\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int acousticName;
  @Deprecated public int function;
  @Deprecated public int acousticIdNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AcousticEmitter() {}

  /**
   * All-args constructor.
   */
  public AcousticEmitter(java.lang.Integer acousticName, java.lang.Integer function, java.lang.Integer acousticIdNumber) {
    this.acousticName = acousticName;
    this.function = function;
    this.acousticIdNumber = acousticIdNumber;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return acousticName;
    case 1: return function;
    case 2: return acousticIdNumber;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: acousticName = (java.lang.Integer)value$; break;
    case 1: function = (java.lang.Integer)value$; break;
    case 2: acousticIdNumber = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'acousticName' field.
   */
  public java.lang.Integer getAcousticName() {
    return acousticName;
  }

  /**
   * Sets the value of the 'acousticName' field.
   * @param value the value to set.
   */
  public void setAcousticName(java.lang.Integer value) {
    this.acousticName = value;
  }

  /**
   * Gets the value of the 'function' field.
   */
  public java.lang.Integer getFunction() {
    return function;
  }

  /**
   * Sets the value of the 'function' field.
   * @param value the value to set.
   */
  public void setFunction(java.lang.Integer value) {
    this.function = value;
  }

  /**
   * Gets the value of the 'acousticIdNumber' field.
   */
  public java.lang.Integer getAcousticIdNumber() {
    return acousticIdNumber;
  }

  /**
   * Sets the value of the 'acousticIdNumber' field.
   * @param value the value to set.
   */
  public void setAcousticIdNumber(java.lang.Integer value) {
    this.acousticIdNumber = value;
  }

  /** Creates a new AcousticEmitter RecordBuilder */
  public static com.cohesionforce.dis.avro.AcousticEmitter.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.AcousticEmitter.Builder();
  }
  
  /** Creates a new AcousticEmitter RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.AcousticEmitter.Builder newBuilder(com.cohesionforce.dis.avro.AcousticEmitter.Builder other) {
    return new com.cohesionforce.dis.avro.AcousticEmitter.Builder(other);
  }
  
  /** Creates a new AcousticEmitter RecordBuilder by copying an existing AcousticEmitter instance */
  public static com.cohesionforce.dis.avro.AcousticEmitter.Builder newBuilder(com.cohesionforce.dis.avro.AcousticEmitter other) {
    return new com.cohesionforce.dis.avro.AcousticEmitter.Builder(other);
  }
  
  /**
   * RecordBuilder for AcousticEmitter instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AcousticEmitter>
    implements org.apache.avro.data.RecordBuilder<AcousticEmitter> {

    private int acousticName;
    private int function;
    private int acousticIdNumber;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.AcousticEmitter.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.AcousticEmitter.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.acousticName)) {
        this.acousticName = data().deepCopy(fields()[0].schema(), other.acousticName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.function)) {
        this.function = data().deepCopy(fields()[1].schema(), other.function);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.acousticIdNumber)) {
        this.acousticIdNumber = data().deepCopy(fields()[2].schema(), other.acousticIdNumber);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AcousticEmitter instance */
    private Builder(com.cohesionforce.dis.avro.AcousticEmitter other) {
            super(com.cohesionforce.dis.avro.AcousticEmitter.SCHEMA$);
      if (isValidValue(fields()[0], other.acousticName)) {
        this.acousticName = data().deepCopy(fields()[0].schema(), other.acousticName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.function)) {
        this.function = data().deepCopy(fields()[1].schema(), other.function);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.acousticIdNumber)) {
        this.acousticIdNumber = data().deepCopy(fields()[2].schema(), other.acousticIdNumber);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'acousticName' field */
    public java.lang.Integer getAcousticName() {
      return acousticName;
    }
    
    /** Sets the value of the 'acousticName' field */
    public com.cohesionforce.dis.avro.AcousticEmitter.Builder setAcousticName(int value) {
      validate(fields()[0], value);
      this.acousticName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'acousticName' field has been set */
    public boolean hasAcousticName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'acousticName' field */
    public com.cohesionforce.dis.avro.AcousticEmitter.Builder clearAcousticName() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'function' field */
    public java.lang.Integer getFunction() {
      return function;
    }
    
    /** Sets the value of the 'function' field */
    public com.cohesionforce.dis.avro.AcousticEmitter.Builder setFunction(int value) {
      validate(fields()[1], value);
      this.function = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'function' field has been set */
    public boolean hasFunction() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'function' field */
    public com.cohesionforce.dis.avro.AcousticEmitter.Builder clearFunction() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'acousticIdNumber' field */
    public java.lang.Integer getAcousticIdNumber() {
      return acousticIdNumber;
    }
    
    /** Sets the value of the 'acousticIdNumber' field */
    public com.cohesionforce.dis.avro.AcousticEmitter.Builder setAcousticIdNumber(int value) {
      validate(fields()[2], value);
      this.acousticIdNumber = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'acousticIdNumber' field has been set */
    public boolean hasAcousticIdNumber() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'acousticIdNumber' field */
    public com.cohesionforce.dis.avro.AcousticEmitter.Builder clearAcousticIdNumber() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public AcousticEmitter build() {
      try {
        AcousticEmitter record = new AcousticEmitter();
        record.acousticName = fieldSetFlags()[0] ? this.acousticName : (java.lang.Integer) defaultValue(fields()[0]);
        record.function = fieldSetFlags()[1] ? this.function : (java.lang.Integer) defaultValue(fields()[1]);
        record.acousticIdNumber = fieldSetFlags()[2] ? this.acousticIdNumber : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
