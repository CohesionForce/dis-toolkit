/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DeadReckoningParameter extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DeadReckoningParameter\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"deadReckoningAlgorithm\",\"type\":\"int\"},{\"name\":\"otherParameters\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}]},{\"name\":\"entityLinearAcceleration\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Vector3Float\",\"fields\":[{\"name\":\"x\",\"type\":\"float\"},{\"name\":\"y\",\"type\":\"float\"},{\"name\":\"z\",\"type\":\"float\"}]}]},{\"name\":\"entityAngularVelocity\",\"type\":[\"null\",\"Vector3Float\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int deadReckoningAlgorithm;
  @Deprecated public java.util.List<java.lang.Integer> otherParameters;
  @Deprecated public com.cohesionforce.dis.avro.Vector3Float entityLinearAcceleration;
  @Deprecated public com.cohesionforce.dis.avro.Vector3Float entityAngularVelocity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DeadReckoningParameter() {}

  /**
   * All-args constructor.
   */
  public DeadReckoningParameter(java.lang.Integer deadReckoningAlgorithm, java.util.List<java.lang.Integer> otherParameters, com.cohesionforce.dis.avro.Vector3Float entityLinearAcceleration, com.cohesionforce.dis.avro.Vector3Float entityAngularVelocity) {
    this.deadReckoningAlgorithm = deadReckoningAlgorithm;
    this.otherParameters = otherParameters;
    this.entityLinearAcceleration = entityLinearAcceleration;
    this.entityAngularVelocity = entityAngularVelocity;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return deadReckoningAlgorithm;
    case 1: return otherParameters;
    case 2: return entityLinearAcceleration;
    case 3: return entityAngularVelocity;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: deadReckoningAlgorithm = (java.lang.Integer)value$; break;
    case 1: otherParameters = (java.util.List<java.lang.Integer>)value$; break;
    case 2: entityLinearAcceleration = (com.cohesionforce.dis.avro.Vector3Float)value$; break;
    case 3: entityAngularVelocity = (com.cohesionforce.dis.avro.Vector3Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'deadReckoningAlgorithm' field.
   */
  public java.lang.Integer getDeadReckoningAlgorithm() {
    return deadReckoningAlgorithm;
  }

  /**
   * Sets the value of the 'deadReckoningAlgorithm' field.
   * @param value the value to set.
   */
  public void setDeadReckoningAlgorithm(java.lang.Integer value) {
    this.deadReckoningAlgorithm = value;
  }

  /**
   * Gets the value of the 'otherParameters' field.
   */
  public java.util.List<java.lang.Integer> getOtherParameters() {
    return otherParameters;
  }

  /**
   * Sets the value of the 'otherParameters' field.
   * @param value the value to set.
   */
  public void setOtherParameters(java.util.List<java.lang.Integer> value) {
    this.otherParameters = value;
  }

  /**
   * Gets the value of the 'entityLinearAcceleration' field.
   */
  public com.cohesionforce.dis.avro.Vector3Float getEntityLinearAcceleration() {
    return entityLinearAcceleration;
  }

  /**
   * Sets the value of the 'entityLinearAcceleration' field.
   * @param value the value to set.
   */
  public void setEntityLinearAcceleration(com.cohesionforce.dis.avro.Vector3Float value) {
    this.entityLinearAcceleration = value;
  }

  /**
   * Gets the value of the 'entityAngularVelocity' field.
   */
  public com.cohesionforce.dis.avro.Vector3Float getEntityAngularVelocity() {
    return entityAngularVelocity;
  }

  /**
   * Sets the value of the 'entityAngularVelocity' field.
   * @param value the value to set.
   */
  public void setEntityAngularVelocity(com.cohesionforce.dis.avro.Vector3Float value) {
    this.entityAngularVelocity = value;
  }

  /** Creates a new DeadReckoningParameter RecordBuilder */
  public static com.cohesionforce.dis.avro.DeadReckoningParameter.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.DeadReckoningParameter.Builder();
  }
  
  /** Creates a new DeadReckoningParameter RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.DeadReckoningParameter.Builder newBuilder(com.cohesionforce.dis.avro.DeadReckoningParameter.Builder other) {
    return new com.cohesionforce.dis.avro.DeadReckoningParameter.Builder(other);
  }
  
  /** Creates a new DeadReckoningParameter RecordBuilder by copying an existing DeadReckoningParameter instance */
  public static com.cohesionforce.dis.avro.DeadReckoningParameter.Builder newBuilder(com.cohesionforce.dis.avro.DeadReckoningParameter other) {
    return new com.cohesionforce.dis.avro.DeadReckoningParameter.Builder(other);
  }
  
  /**
   * RecordBuilder for DeadReckoningParameter instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DeadReckoningParameter>
    implements org.apache.avro.data.RecordBuilder<DeadReckoningParameter> {

    private int deadReckoningAlgorithm;
    private java.util.List<java.lang.Integer> otherParameters;
    private com.cohesionforce.dis.avro.Vector3Float entityLinearAcceleration;
    private com.cohesionforce.dis.avro.Vector3Float entityAngularVelocity;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.DeadReckoningParameter.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.DeadReckoningParameter.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.deadReckoningAlgorithm)) {
        this.deadReckoningAlgorithm = data().deepCopy(fields()[0].schema(), other.deadReckoningAlgorithm);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.otherParameters)) {
        this.otherParameters = data().deepCopy(fields()[1].schema(), other.otherParameters);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.entityLinearAcceleration)) {
        this.entityLinearAcceleration = data().deepCopy(fields()[2].schema(), other.entityLinearAcceleration);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.entityAngularVelocity)) {
        this.entityAngularVelocity = data().deepCopy(fields()[3].schema(), other.entityAngularVelocity);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DeadReckoningParameter instance */
    private Builder(com.cohesionforce.dis.avro.DeadReckoningParameter other) {
            super(com.cohesionforce.dis.avro.DeadReckoningParameter.SCHEMA$);
      if (isValidValue(fields()[0], other.deadReckoningAlgorithm)) {
        this.deadReckoningAlgorithm = data().deepCopy(fields()[0].schema(), other.deadReckoningAlgorithm);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.otherParameters)) {
        this.otherParameters = data().deepCopy(fields()[1].schema(), other.otherParameters);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.entityLinearAcceleration)) {
        this.entityLinearAcceleration = data().deepCopy(fields()[2].schema(), other.entityLinearAcceleration);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.entityAngularVelocity)) {
        this.entityAngularVelocity = data().deepCopy(fields()[3].schema(), other.entityAngularVelocity);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'deadReckoningAlgorithm' field */
    public java.lang.Integer getDeadReckoningAlgorithm() {
      return deadReckoningAlgorithm;
    }
    
    /** Sets the value of the 'deadReckoningAlgorithm' field */
    public com.cohesionforce.dis.avro.DeadReckoningParameter.Builder setDeadReckoningAlgorithm(int value) {
      validate(fields()[0], value);
      this.deadReckoningAlgorithm = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'deadReckoningAlgorithm' field has been set */
    public boolean hasDeadReckoningAlgorithm() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'deadReckoningAlgorithm' field */
    public com.cohesionforce.dis.avro.DeadReckoningParameter.Builder clearDeadReckoningAlgorithm() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'otherParameters' field */
    public java.util.List<java.lang.Integer> getOtherParameters() {
      return otherParameters;
    }
    
    /** Sets the value of the 'otherParameters' field */
    public com.cohesionforce.dis.avro.DeadReckoningParameter.Builder setOtherParameters(java.util.List<java.lang.Integer> value) {
      validate(fields()[1], value);
      this.otherParameters = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'otherParameters' field has been set */
    public boolean hasOtherParameters() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'otherParameters' field */
    public com.cohesionforce.dis.avro.DeadReckoningParameter.Builder clearOtherParameters() {
      otherParameters = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'entityLinearAcceleration' field */
    public com.cohesionforce.dis.avro.Vector3Float getEntityLinearAcceleration() {
      return entityLinearAcceleration;
    }
    
    /** Sets the value of the 'entityLinearAcceleration' field */
    public com.cohesionforce.dis.avro.DeadReckoningParameter.Builder setEntityLinearAcceleration(com.cohesionforce.dis.avro.Vector3Float value) {
      validate(fields()[2], value);
      this.entityLinearAcceleration = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'entityLinearAcceleration' field has been set */
    public boolean hasEntityLinearAcceleration() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'entityLinearAcceleration' field */
    public com.cohesionforce.dis.avro.DeadReckoningParameter.Builder clearEntityLinearAcceleration() {
      entityLinearAcceleration = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'entityAngularVelocity' field */
    public com.cohesionforce.dis.avro.Vector3Float getEntityAngularVelocity() {
      return entityAngularVelocity;
    }
    
    /** Sets the value of the 'entityAngularVelocity' field */
    public com.cohesionforce.dis.avro.DeadReckoningParameter.Builder setEntityAngularVelocity(com.cohesionforce.dis.avro.Vector3Float value) {
      validate(fields()[3], value);
      this.entityAngularVelocity = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'entityAngularVelocity' field has been set */
    public boolean hasEntityAngularVelocity() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'entityAngularVelocity' field */
    public com.cohesionforce.dis.avro.DeadReckoningParameter.Builder clearEntityAngularVelocity() {
      entityAngularVelocity = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public DeadReckoningParameter build() {
      try {
        DeadReckoningParameter record = new DeadReckoningParameter();
        record.deadReckoningAlgorithm = fieldSetFlags()[0] ? this.deadReckoningAlgorithm : (java.lang.Integer) defaultValue(fields()[0]);
        record.otherParameters = fieldSetFlags()[1] ? this.otherParameters : (java.util.List<java.lang.Integer>) defaultValue(fields()[1]);
        record.entityLinearAcceleration = fieldSetFlags()[2] ? this.entityLinearAcceleration : (com.cohesionforce.dis.avro.Vector3Float) defaultValue(fields()[2]);
        record.entityAngularVelocity = fieldSetFlags()[3] ? this.entityAngularVelocity : (com.cohesionforce.dis.avro.Vector3Float) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
