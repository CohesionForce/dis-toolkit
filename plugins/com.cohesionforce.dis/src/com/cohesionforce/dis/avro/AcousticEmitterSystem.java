/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AcousticEmitterSystem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AcousticEmitterSystem\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"acousticName\",\"type\":\"int\"},{\"name\":\"acousticFunction\",\"type\":\"int\"},{\"name\":\"acousticID\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int acousticName;
  @Deprecated public int acousticFunction;
  @Deprecated public int acousticID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AcousticEmitterSystem() {}

  /**
   * All-args constructor.
   */
  public AcousticEmitterSystem(java.lang.Integer acousticName, java.lang.Integer acousticFunction, java.lang.Integer acousticID) {
    this.acousticName = acousticName;
    this.acousticFunction = acousticFunction;
    this.acousticID = acousticID;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return acousticName;
    case 1: return acousticFunction;
    case 2: return acousticID;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: acousticName = (java.lang.Integer)value$; break;
    case 1: acousticFunction = (java.lang.Integer)value$; break;
    case 2: acousticID = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'acousticName' field.
   */
  public java.lang.Integer getAcousticName() {
    return acousticName;
  }

  /**
   * Sets the value of the 'acousticName' field.
   * @param value the value to set.
   */
  public void setAcousticName(java.lang.Integer value) {
    this.acousticName = value;
  }

  /**
   * Gets the value of the 'acousticFunction' field.
   */
  public java.lang.Integer getAcousticFunction() {
    return acousticFunction;
  }

  /**
   * Sets the value of the 'acousticFunction' field.
   * @param value the value to set.
   */
  public void setAcousticFunction(java.lang.Integer value) {
    this.acousticFunction = value;
  }

  /**
   * Gets the value of the 'acousticID' field.
   */
  public java.lang.Integer getAcousticID() {
    return acousticID;
  }

  /**
   * Sets the value of the 'acousticID' field.
   * @param value the value to set.
   */
  public void setAcousticID(java.lang.Integer value) {
    this.acousticID = value;
  }

  /** Creates a new AcousticEmitterSystem RecordBuilder */
  public static com.cohesionforce.dis.avro.AcousticEmitterSystem.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.AcousticEmitterSystem.Builder();
  }
  
  /** Creates a new AcousticEmitterSystem RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.AcousticEmitterSystem.Builder newBuilder(com.cohesionforce.dis.avro.AcousticEmitterSystem.Builder other) {
    return new com.cohesionforce.dis.avro.AcousticEmitterSystem.Builder(other);
  }
  
  /** Creates a new AcousticEmitterSystem RecordBuilder by copying an existing AcousticEmitterSystem instance */
  public static com.cohesionforce.dis.avro.AcousticEmitterSystem.Builder newBuilder(com.cohesionforce.dis.avro.AcousticEmitterSystem other) {
    return new com.cohesionforce.dis.avro.AcousticEmitterSystem.Builder(other);
  }
  
  /**
   * RecordBuilder for AcousticEmitterSystem instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AcousticEmitterSystem>
    implements org.apache.avro.data.RecordBuilder<AcousticEmitterSystem> {

    private int acousticName;
    private int acousticFunction;
    private int acousticID;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.AcousticEmitterSystem.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.AcousticEmitterSystem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.acousticName)) {
        this.acousticName = data().deepCopy(fields()[0].schema(), other.acousticName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.acousticFunction)) {
        this.acousticFunction = data().deepCopy(fields()[1].schema(), other.acousticFunction);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.acousticID)) {
        this.acousticID = data().deepCopy(fields()[2].schema(), other.acousticID);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AcousticEmitterSystem instance */
    private Builder(com.cohesionforce.dis.avro.AcousticEmitterSystem other) {
            super(com.cohesionforce.dis.avro.AcousticEmitterSystem.SCHEMA$);
      if (isValidValue(fields()[0], other.acousticName)) {
        this.acousticName = data().deepCopy(fields()[0].schema(), other.acousticName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.acousticFunction)) {
        this.acousticFunction = data().deepCopy(fields()[1].schema(), other.acousticFunction);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.acousticID)) {
        this.acousticID = data().deepCopy(fields()[2].schema(), other.acousticID);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'acousticName' field */
    public java.lang.Integer getAcousticName() {
      return acousticName;
    }
    
    /** Sets the value of the 'acousticName' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystem.Builder setAcousticName(int value) {
      validate(fields()[0], value);
      this.acousticName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'acousticName' field has been set */
    public boolean hasAcousticName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'acousticName' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystem.Builder clearAcousticName() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'acousticFunction' field */
    public java.lang.Integer getAcousticFunction() {
      return acousticFunction;
    }
    
    /** Sets the value of the 'acousticFunction' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystem.Builder setAcousticFunction(int value) {
      validate(fields()[1], value);
      this.acousticFunction = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'acousticFunction' field has been set */
    public boolean hasAcousticFunction() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'acousticFunction' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystem.Builder clearAcousticFunction() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'acousticID' field */
    public java.lang.Integer getAcousticID() {
      return acousticID;
    }
    
    /** Sets the value of the 'acousticID' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystem.Builder setAcousticID(int value) {
      validate(fields()[2], value);
      this.acousticID = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'acousticID' field has been set */
    public boolean hasAcousticID() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'acousticID' field */
    public com.cohesionforce.dis.avro.AcousticEmitterSystem.Builder clearAcousticID() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public AcousticEmitterSystem build() {
      try {
        AcousticEmitterSystem record = new AcousticEmitterSystem();
        record.acousticName = fieldSetFlags()[0] ? this.acousticName : (java.lang.Integer) defaultValue(fields()[0]);
        record.acousticFunction = fieldSetFlags()[1] ? this.acousticFunction : (java.lang.Integer) defaultValue(fields()[1]);
        record.acousticID = fieldSetFlags()[2] ? this.acousticID : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
