/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ShaftRPMs extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ShaftRPMs\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"currentShaftRPMs\",\"type\":\"int\"},{\"name\":\"orderedShaftRPMs\",\"type\":\"int\"},{\"name\":\"shaftRPMRateOfChange\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int currentShaftRPMs;
  @Deprecated public int orderedShaftRPMs;
  @Deprecated public float shaftRPMRateOfChange;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ShaftRPMs() {}

  /**
   * All-args constructor.
   */
  public ShaftRPMs(java.lang.Integer currentShaftRPMs, java.lang.Integer orderedShaftRPMs, java.lang.Float shaftRPMRateOfChange) {
    this.currentShaftRPMs = currentShaftRPMs;
    this.orderedShaftRPMs = orderedShaftRPMs;
    this.shaftRPMRateOfChange = shaftRPMRateOfChange;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return currentShaftRPMs;
    case 1: return orderedShaftRPMs;
    case 2: return shaftRPMRateOfChange;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: currentShaftRPMs = (java.lang.Integer)value$; break;
    case 1: orderedShaftRPMs = (java.lang.Integer)value$; break;
    case 2: shaftRPMRateOfChange = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'currentShaftRPMs' field.
   */
  public java.lang.Integer getCurrentShaftRPMs() {
    return currentShaftRPMs;
  }

  /**
   * Sets the value of the 'currentShaftRPMs' field.
   * @param value the value to set.
   */
  public void setCurrentShaftRPMs(java.lang.Integer value) {
    this.currentShaftRPMs = value;
  }

  /**
   * Gets the value of the 'orderedShaftRPMs' field.
   */
  public java.lang.Integer getOrderedShaftRPMs() {
    return orderedShaftRPMs;
  }

  /**
   * Sets the value of the 'orderedShaftRPMs' field.
   * @param value the value to set.
   */
  public void setOrderedShaftRPMs(java.lang.Integer value) {
    this.orderedShaftRPMs = value;
  }

  /**
   * Gets the value of the 'shaftRPMRateOfChange' field.
   */
  public java.lang.Float getShaftRPMRateOfChange() {
    return shaftRPMRateOfChange;
  }

  /**
   * Sets the value of the 'shaftRPMRateOfChange' field.
   * @param value the value to set.
   */
  public void setShaftRPMRateOfChange(java.lang.Float value) {
    this.shaftRPMRateOfChange = value;
  }

  /** Creates a new ShaftRPMs RecordBuilder */
  public static com.cohesionforce.dis.avro.ShaftRPMs.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.ShaftRPMs.Builder();
  }
  
  /** Creates a new ShaftRPMs RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.ShaftRPMs.Builder newBuilder(com.cohesionforce.dis.avro.ShaftRPMs.Builder other) {
    return new com.cohesionforce.dis.avro.ShaftRPMs.Builder(other);
  }
  
  /** Creates a new ShaftRPMs RecordBuilder by copying an existing ShaftRPMs instance */
  public static com.cohesionforce.dis.avro.ShaftRPMs.Builder newBuilder(com.cohesionforce.dis.avro.ShaftRPMs other) {
    return new com.cohesionforce.dis.avro.ShaftRPMs.Builder(other);
  }
  
  /**
   * RecordBuilder for ShaftRPMs instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ShaftRPMs>
    implements org.apache.avro.data.RecordBuilder<ShaftRPMs> {

    private int currentShaftRPMs;
    private int orderedShaftRPMs;
    private float shaftRPMRateOfChange;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.ShaftRPMs.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.ShaftRPMs.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.currentShaftRPMs)) {
        this.currentShaftRPMs = data().deepCopy(fields()[0].schema(), other.currentShaftRPMs);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orderedShaftRPMs)) {
        this.orderedShaftRPMs = data().deepCopy(fields()[1].schema(), other.orderedShaftRPMs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.shaftRPMRateOfChange)) {
        this.shaftRPMRateOfChange = data().deepCopy(fields()[2].schema(), other.shaftRPMRateOfChange);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ShaftRPMs instance */
    private Builder(com.cohesionforce.dis.avro.ShaftRPMs other) {
            super(com.cohesionforce.dis.avro.ShaftRPMs.SCHEMA$);
      if (isValidValue(fields()[0], other.currentShaftRPMs)) {
        this.currentShaftRPMs = data().deepCopy(fields()[0].schema(), other.currentShaftRPMs);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orderedShaftRPMs)) {
        this.orderedShaftRPMs = data().deepCopy(fields()[1].schema(), other.orderedShaftRPMs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.shaftRPMRateOfChange)) {
        this.shaftRPMRateOfChange = data().deepCopy(fields()[2].schema(), other.shaftRPMRateOfChange);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'currentShaftRPMs' field */
    public java.lang.Integer getCurrentShaftRPMs() {
      return currentShaftRPMs;
    }
    
    /** Sets the value of the 'currentShaftRPMs' field */
    public com.cohesionforce.dis.avro.ShaftRPMs.Builder setCurrentShaftRPMs(int value) {
      validate(fields()[0], value);
      this.currentShaftRPMs = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'currentShaftRPMs' field has been set */
    public boolean hasCurrentShaftRPMs() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'currentShaftRPMs' field */
    public com.cohesionforce.dis.avro.ShaftRPMs.Builder clearCurrentShaftRPMs() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'orderedShaftRPMs' field */
    public java.lang.Integer getOrderedShaftRPMs() {
      return orderedShaftRPMs;
    }
    
    /** Sets the value of the 'orderedShaftRPMs' field */
    public com.cohesionforce.dis.avro.ShaftRPMs.Builder setOrderedShaftRPMs(int value) {
      validate(fields()[1], value);
      this.orderedShaftRPMs = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'orderedShaftRPMs' field has been set */
    public boolean hasOrderedShaftRPMs() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'orderedShaftRPMs' field */
    public com.cohesionforce.dis.avro.ShaftRPMs.Builder clearOrderedShaftRPMs() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'shaftRPMRateOfChange' field */
    public java.lang.Float getShaftRPMRateOfChange() {
      return shaftRPMRateOfChange;
    }
    
    /** Sets the value of the 'shaftRPMRateOfChange' field */
    public com.cohesionforce.dis.avro.ShaftRPMs.Builder setShaftRPMRateOfChange(float value) {
      validate(fields()[2], value);
      this.shaftRPMRateOfChange = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'shaftRPMRateOfChange' field has been set */
    public boolean hasShaftRPMRateOfChange() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'shaftRPMRateOfChange' field */
    public com.cohesionforce.dis.avro.ShaftRPMs.Builder clearShaftRPMRateOfChange() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public ShaftRPMs build() {
      try {
        ShaftRPMs record = new ShaftRPMs();
        record.currentShaftRPMs = fieldSetFlags()[0] ? this.currentShaftRPMs : (java.lang.Integer) defaultValue(fields()[0]);
        record.orderedShaftRPMs = fieldSetFlags()[1] ? this.orderedShaftRPMs : (java.lang.Integer) defaultValue(fields()[1]);
        record.shaftRPMRateOfChange = fieldSetFlags()[2] ? this.shaftRPMRateOfChange : (java.lang.Float) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
