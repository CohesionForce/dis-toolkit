/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ClockTime extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClockTime\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"hour\",\"type\":\"int\"},{\"name\":\"timePastHour\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int hour;
  @Deprecated public long timePastHour;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ClockTime() {}

  /**
   * All-args constructor.
   */
  public ClockTime(java.lang.Integer hour, java.lang.Long timePastHour) {
    this.hour = hour;
    this.timePastHour = timePastHour;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return hour;
    case 1: return timePastHour;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: hour = (java.lang.Integer)value$; break;
    case 1: timePastHour = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'hour' field.
   */
  public java.lang.Integer getHour() {
    return hour;
  }

  /**
   * Sets the value of the 'hour' field.
   * @param value the value to set.
   */
  public void setHour(java.lang.Integer value) {
    this.hour = value;
  }

  /**
   * Gets the value of the 'timePastHour' field.
   */
  public java.lang.Long getTimePastHour() {
    return timePastHour;
  }

  /**
   * Sets the value of the 'timePastHour' field.
   * @param value the value to set.
   */
  public void setTimePastHour(java.lang.Long value) {
    this.timePastHour = value;
  }

  /** Creates a new ClockTime RecordBuilder */
  public static com.cohesionforce.dis.avro.ClockTime.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.ClockTime.Builder();
  }
  
  /** Creates a new ClockTime RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.ClockTime.Builder newBuilder(com.cohesionforce.dis.avro.ClockTime.Builder other) {
    return new com.cohesionforce.dis.avro.ClockTime.Builder(other);
  }
  
  /** Creates a new ClockTime RecordBuilder by copying an existing ClockTime instance */
  public static com.cohesionforce.dis.avro.ClockTime.Builder newBuilder(com.cohesionforce.dis.avro.ClockTime other) {
    return new com.cohesionforce.dis.avro.ClockTime.Builder(other);
  }
  
  /**
   * RecordBuilder for ClockTime instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClockTime>
    implements org.apache.avro.data.RecordBuilder<ClockTime> {

    private int hour;
    private long timePastHour;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.ClockTime.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.ClockTime.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.hour)) {
        this.hour = data().deepCopy(fields()[0].schema(), other.hour);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timePastHour)) {
        this.timePastHour = data().deepCopy(fields()[1].schema(), other.timePastHour);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ClockTime instance */
    private Builder(com.cohesionforce.dis.avro.ClockTime other) {
            super(com.cohesionforce.dis.avro.ClockTime.SCHEMA$);
      if (isValidValue(fields()[0], other.hour)) {
        this.hour = data().deepCopy(fields()[0].schema(), other.hour);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timePastHour)) {
        this.timePastHour = data().deepCopy(fields()[1].schema(), other.timePastHour);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'hour' field */
    public java.lang.Integer getHour() {
      return hour;
    }
    
    /** Sets the value of the 'hour' field */
    public com.cohesionforce.dis.avro.ClockTime.Builder setHour(int value) {
      validate(fields()[0], value);
      this.hour = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'hour' field has been set */
    public boolean hasHour() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'hour' field */
    public com.cohesionforce.dis.avro.ClockTime.Builder clearHour() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'timePastHour' field */
    public java.lang.Long getTimePastHour() {
      return timePastHour;
    }
    
    /** Sets the value of the 'timePastHour' field */
    public com.cohesionforce.dis.avro.ClockTime.Builder setTimePastHour(long value) {
      validate(fields()[1], value);
      this.timePastHour = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'timePastHour' field has been set */
    public boolean hasTimePastHour() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'timePastHour' field */
    public com.cohesionforce.dis.avro.ClockTime.Builder clearTimePastHour() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public ClockTime build() {
      try {
        ClockTime record = new ClockTime();
        record.hour = fieldSetFlags()[0] ? this.hour : (java.lang.Integer) defaultValue(fields()[0]);
        record.timePastHour = fieldSetFlags()[1] ? this.timePastHour : (java.lang.Long) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
