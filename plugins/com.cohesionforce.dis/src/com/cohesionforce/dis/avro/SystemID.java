/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cohesionforce.dis.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SystemID extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SystemID\",\"namespace\":\"com.cohesionforce.dis.avro\",\"fields\":[{\"name\":\"systemType\",\"type\":\"int\"},{\"name\":\"systemName\",\"type\":\"int\"},{\"name\":\"systemMode\",\"type\":\"int\"},{\"name\":\"changeOptions\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int systemType;
  @Deprecated public int systemName;
  @Deprecated public int systemMode;
  @Deprecated public int changeOptions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SystemID() {}

  /**
   * All-args constructor.
   */
  public SystemID(java.lang.Integer systemType, java.lang.Integer systemName, java.lang.Integer systemMode, java.lang.Integer changeOptions) {
    this.systemType = systemType;
    this.systemName = systemName;
    this.systemMode = systemMode;
    this.changeOptions = changeOptions;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return systemType;
    case 1: return systemName;
    case 2: return systemMode;
    case 3: return changeOptions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: systemType = (java.lang.Integer)value$; break;
    case 1: systemName = (java.lang.Integer)value$; break;
    case 2: systemMode = (java.lang.Integer)value$; break;
    case 3: changeOptions = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'systemType' field.
   */
  public java.lang.Integer getSystemType() {
    return systemType;
  }

  /**
   * Sets the value of the 'systemType' field.
   * @param value the value to set.
   */
  public void setSystemType(java.lang.Integer value) {
    this.systemType = value;
  }

  /**
   * Gets the value of the 'systemName' field.
   */
  public java.lang.Integer getSystemName() {
    return systemName;
  }

  /**
   * Sets the value of the 'systemName' field.
   * @param value the value to set.
   */
  public void setSystemName(java.lang.Integer value) {
    this.systemName = value;
  }

  /**
   * Gets the value of the 'systemMode' field.
   */
  public java.lang.Integer getSystemMode() {
    return systemMode;
  }

  /**
   * Sets the value of the 'systemMode' field.
   * @param value the value to set.
   */
  public void setSystemMode(java.lang.Integer value) {
    this.systemMode = value;
  }

  /**
   * Gets the value of the 'changeOptions' field.
   */
  public java.lang.Integer getChangeOptions() {
    return changeOptions;
  }

  /**
   * Sets the value of the 'changeOptions' field.
   * @param value the value to set.
   */
  public void setChangeOptions(java.lang.Integer value) {
    this.changeOptions = value;
  }

  /** Creates a new SystemID RecordBuilder */
  public static com.cohesionforce.dis.avro.SystemID.Builder newBuilder() {
    return new com.cohesionforce.dis.avro.SystemID.Builder();
  }
  
  /** Creates a new SystemID RecordBuilder by copying an existing Builder */
  public static com.cohesionforce.dis.avro.SystemID.Builder newBuilder(com.cohesionforce.dis.avro.SystemID.Builder other) {
    return new com.cohesionforce.dis.avro.SystemID.Builder(other);
  }
  
  /** Creates a new SystemID RecordBuilder by copying an existing SystemID instance */
  public static com.cohesionforce.dis.avro.SystemID.Builder newBuilder(com.cohesionforce.dis.avro.SystemID other) {
    return new com.cohesionforce.dis.avro.SystemID.Builder(other);
  }
  
  /**
   * RecordBuilder for SystemID instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SystemID>
    implements org.apache.avro.data.RecordBuilder<SystemID> {

    private int systemType;
    private int systemName;
    private int systemMode;
    private int changeOptions;

    /** Creates a new Builder */
    private Builder() {
      super(com.cohesionforce.dis.avro.SystemID.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cohesionforce.dis.avro.SystemID.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.systemType)) {
        this.systemType = data().deepCopy(fields()[0].schema(), other.systemType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.systemName)) {
        this.systemName = data().deepCopy(fields()[1].schema(), other.systemName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.systemMode)) {
        this.systemMode = data().deepCopy(fields()[2].schema(), other.systemMode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.changeOptions)) {
        this.changeOptions = data().deepCopy(fields()[3].schema(), other.changeOptions);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SystemID instance */
    private Builder(com.cohesionforce.dis.avro.SystemID other) {
            super(com.cohesionforce.dis.avro.SystemID.SCHEMA$);
      if (isValidValue(fields()[0], other.systemType)) {
        this.systemType = data().deepCopy(fields()[0].schema(), other.systemType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.systemName)) {
        this.systemName = data().deepCopy(fields()[1].schema(), other.systemName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.systemMode)) {
        this.systemMode = data().deepCopy(fields()[2].schema(), other.systemMode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.changeOptions)) {
        this.changeOptions = data().deepCopy(fields()[3].schema(), other.changeOptions);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'systemType' field */
    public java.lang.Integer getSystemType() {
      return systemType;
    }
    
    /** Sets the value of the 'systemType' field */
    public com.cohesionforce.dis.avro.SystemID.Builder setSystemType(int value) {
      validate(fields()[0], value);
      this.systemType = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'systemType' field has been set */
    public boolean hasSystemType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'systemType' field */
    public com.cohesionforce.dis.avro.SystemID.Builder clearSystemType() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'systemName' field */
    public java.lang.Integer getSystemName() {
      return systemName;
    }
    
    /** Sets the value of the 'systemName' field */
    public com.cohesionforce.dis.avro.SystemID.Builder setSystemName(int value) {
      validate(fields()[1], value);
      this.systemName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'systemName' field has been set */
    public boolean hasSystemName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'systemName' field */
    public com.cohesionforce.dis.avro.SystemID.Builder clearSystemName() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'systemMode' field */
    public java.lang.Integer getSystemMode() {
      return systemMode;
    }
    
    /** Sets the value of the 'systemMode' field */
    public com.cohesionforce.dis.avro.SystemID.Builder setSystemMode(int value) {
      validate(fields()[2], value);
      this.systemMode = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'systemMode' field has been set */
    public boolean hasSystemMode() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'systemMode' field */
    public com.cohesionforce.dis.avro.SystemID.Builder clearSystemMode() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'changeOptions' field */
    public java.lang.Integer getChangeOptions() {
      return changeOptions;
    }
    
    /** Sets the value of the 'changeOptions' field */
    public com.cohesionforce.dis.avro.SystemID.Builder setChangeOptions(int value) {
      validate(fields()[3], value);
      this.changeOptions = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'changeOptions' field has been set */
    public boolean hasChangeOptions() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'changeOptions' field */
    public com.cohesionforce.dis.avro.SystemID.Builder clearChangeOptions() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public SystemID build() {
      try {
        SystemID record = new SystemID();
        record.systemType = fieldSetFlags()[0] ? this.systemType : (java.lang.Integer) defaultValue(fields()[0]);
        record.systemName = fieldSetFlags()[1] ? this.systemName : (java.lang.Integer) defaultValue(fields()[1]);
        record.systemMode = fieldSetFlags()[2] ? this.systemMode : (java.lang.Integer) defaultValue(fields()[2]);
        record.changeOptions = fieldSetFlags()[3] ? this.changeOptions : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
